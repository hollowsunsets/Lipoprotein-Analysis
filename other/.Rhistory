shiny::runApp('UW/sp2017/INFO201/twitter-weather')
library(anytime)
library(shiny)
library(dplyr)
library(plotly)
library(httr)
library(rgeos)
library(jsonlite)
library(rgdal)
library(rtweet)
library(stringr)
runApp('UW/sp2017/INFO201/twitter-weather')
source('scripts/setup.R')
#libraries
library(anytime)
library(shiny)
library(dplyr)
library(plotly)
library(httr)
library(rgeos)
library(jsonlite)
library(rgdal)
library(rtweet)
library(stringr)
library(rjson)
library(anytime)
library(shiny)
library(dplyr)
library(plotly)
library(httr)
library(rgeos)
library(jsonlite)
library(rgdal)
library(rtweet)
library(stringr)
shiny::runApp('UW/sp2017/INFO201/weather-app')
lat.long.df <- geo_data %>% findLatLong(city, state)
longitude <- lat.long.df[,1]
latitude <- lat.long.df[,2]
unix.time.day <- as.numeric(as.POSIXct(anydate(day)))
unix.time.day <- as.numeric(as.POSIXct(anydate(day)))
base.url <- "https://api.darksky.net/forecast/"
weather.uri <- paste0(base.url, "f2816b4bb0266a96e77991a187b35d9c", "/", latitude, ",", longitude, ",", unix.time.day)
weather.params <- list(exclude = paste0("currently", ",", "minutely", ",", "daily", ",", "flags"))
weather.response <- GET(weather.uri, query = weather.params)
weather.body <- content(weather.response, "text")
weather.results <- fromJSON(weather.body)
location.timezone <- weather.results$timezone
weather.df <- weather.results$hourly$data
weather.df <- ldply(weather.df, data.frame)
num.time <- as.numeric(weather.df$time)
weather.df$time <- anytime(num.time, tz = location.timezone, asUTC = FALSE)
weather.df$time.only <- format(as.POSIXct(weather.df$time) , format = "%H:%M:%S")
num.time <- as.numeric(weather.df$time)
anytime(num.time, tz = location.timezone, asUTC = FALSE)
runApp('UW/sp2017/INFO201/weather-app')
shiny::runApp()
runApp()
runApp()
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp()
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
shiny::runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
sparklink <- read.csv("data\\SparkRunlistDataset2.csv")[ ,c('Sample.Name', 'Sample.Vial')]
setwd("~/Jobs/Spring 2017/DMEN Assistant/dmen-vis")
sparklink <- read.csv("data\\SparkRunlistDataset2.csv")[ ,c('Sample.Name', 'Sample.Vial')]
View(sparklink)
sparklink2 <- sparklink
sparklink2$Sample.Name = (as.character(sparklink$Sample.Name))
sparklink2$Sample.Vial = (as.character(sparklink$Sample.Vial))
merge<-t(sparklink2[,2])
View(sparklink2)
View(sparklink)
View(sparklink2)
View(sparklink2)
View(merge)
View(merge)
View(sparklink)
View(merge)
View(sparklink)
View(merge)
svp <- read.csv("data\\AIMDataset2.csv", stringsAsFactors = FALSE)
View(svp)
sample_start_index<<-which(svp[,1]=='Raw Data - Time(s)')
dia_start_index<<-which(svp[,1]=='Raw Data - Time(s)')
datetime<<-which(svp[,1]=='Date')
svp_diameters <- read.csv("data\\AIMDataset2.csv", skip = dia_start_index)[,2]
svp_ts_df <- read.csv("data\\AIMDataset2.csv",skip=(datetime),header=F,stringsAsFactors=FALSE)[,c(F,T)][1:2,]
View(svp_ts_df)
svp_ts <- read.csv("data\\AIMDataset2.csv",skip=(datetime),header=F,stringsAsFactors=FALSE)[,c(F,T)][1:2,]
svp_ts<-as.POSIXct(paste(svp_ts[1,], svp_ts[2,], sep=" "), format="%m/%d/%Y %H:%M:%S")
shiny::runApp()
runApp('other')
