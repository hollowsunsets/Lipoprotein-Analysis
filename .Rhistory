shiny::runApp('UW/sp2017/INFO201/twitter-weather')
library(anytime)
library(shiny)
library(dplyr)
library(plotly)
library(httr)
library(rgeos)
library(jsonlite)
library(rgdal)
library(rtweet)
library(stringr)
runApp('UW/sp2017/INFO201/twitter-weather')
source('scripts/setup.R')
#libraries
library(anytime)
library(shiny)
library(dplyr)
library(plotly)
library(httr)
library(rgeos)
library(jsonlite)
library(rgdal)
library(rtweet)
library(stringr)
library(rjson)
library(anytime)
library(shiny)
library(dplyr)
library(plotly)
library(httr)
library(rgeos)
library(jsonlite)
library(rgdal)
library(rtweet)
library(stringr)
shiny::runApp('UW/sp2017/INFO201/weather-app')
lat.long.df <- geo_data %>% findLatLong(city, state)
longitude <- lat.long.df[,1]
latitude <- lat.long.df[,2]
unix.time.day <- as.numeric(as.POSIXct(anydate(day)))
unix.time.day <- as.numeric(as.POSIXct(anydate(day)))
base.url <- "https://api.darksky.net/forecast/"
weather.uri <- paste0(base.url, "f2816b4bb0266a96e77991a187b35d9c", "/", latitude, ",", longitude, ",", unix.time.day)
weather.params <- list(exclude = paste0("currently", ",", "minutely", ",", "daily", ",", "flags"))
weather.response <- GET(weather.uri, query = weather.params)
weather.body <- content(weather.response, "text")
weather.results <- fromJSON(weather.body)
location.timezone <- weather.results$timezone
weather.df <- weather.results$hourly$data
weather.df <- ldply(weather.df, data.frame)
num.time <- as.numeric(weather.df$time)
weather.df$time <- anytime(num.time, tz = location.timezone, asUTC = FALSE)
weather.df$time.only <- format(as.POSIXct(weather.df$time) , format = "%H:%M:%S")
num.time <- as.numeric(weather.df$time)
anytime(num.time, tz = location.timezone, asUTC = FALSE)
runApp('UW/sp2017/INFO201/weather-app')
shiny::runApp()
runApp()
runApp()
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp()
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
shiny::runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
shiny::runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
shiny::runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
library(shinyjs)
install.packages("shinyjs")
library(shinyjs)
shiny::runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
shiny::runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
shiny::runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
shiny::runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
loess.filter <- function (x, span) loess(formula = paste(x, "id", sep = "~"),
data = dat,
degree = 1,
span = span)$fitted
curr.scan.state <- graph.data$`sample 1`
applyLoessSmooth <- function(curr.scan.state, smoothing.span) {
vars <- colname(curr.scan.state)
id <- 1:nrow(curr.scan.state)
loess.graph.data <- as.data.frame(lapply(vars, loess.filter, span = smoothing.span),
col.names = colnames(curr.scan.state))
sample.rows <- length(loess.graph.data[[1,]])
loess.graph.data <- loess.graph.data %>% mutate("sample.diameters" = curr.scan.state$sample.diameters[1:sample.rows])
}
test.loess <- applyLoessSmooth(curr.scan.state)
applyLoessSmooth <- function(curr.scan.state, smoothing.span) {
vars <- colnames(curr.scan.state)
id <- 1:nrow(curr.scan.state)
loess.graph.data <- as.data.frame(lapply(vars, loess.filter, span = smoothing.span),
col.names = colnames(curr.scan.state))
sample.rows <- length(loess.graph.data[[1,]])
loess.graph.data <- loess.graph.data %>% mutate("sample.diameters" = curr.scan.state$sample.diameters[1:sample.rows])
}
test.loess <- applyLoessSmooth(curr.scan.state)
loess.filter <- function (x, span, raw.data) loess(formula = paste(x, "id", sep = "~"),
data = raw.data,
degree = 1,
span = span)$fitted
applyLoessSmooth <- function(curr.scan.state, smoothing.span) {
vars <- colnames(curr.scan.state)
id <- 1:nrow(curr.scan.state)
loess.graph.data <- as.data.frame(lapply(vars, loess.filter, span = smoothing.span),
col.names = colnames(curr.scan.state), raw.data = curr.scan.state)
sample.rows <- length(loess.graph.data[[1,]])
loess.graph.data <- loess.graph.data %>% mutate("sample.diameters" = curr.scan.state$sample.diameters[1:sample.rows])
}
test.loess <- applyLoessSmooth(curr.scan.state)
applyLoessSmooth <- function(curr.scan.state, smoothing.span) {
vars <- colnames(curr.scan.state)
id <- 1:nrow(curr.scan.state)
loess.filter <- function (x, span, raw.data) loess(formula = paste(x, "id", sep = "~"),
data = curr.scan.state,
degree = 1,
span = span)$fitted
loess.graph.data <- as.data.frame(lapply(vars, loess.filter, span = smoothing.span),
col.names = colnames(curr.scan.state))
sample.rows <- length(loess.graph.data[[1,]])
loess.graph.data <- loess.graph.data %>% mutate("sample.diameters" = curr.scan.state$sample.diameters[1:sample.rows])
}
test.loess <- applyLoessSmooth(curr.scan.state)
applyLoessSmooth <- function(curr.scan.state, smoothing.span) {
## response
vars <- colnames(curr.scan.state)
## covariate
id <- 1:nrow(curr.scan.state)
## define a loess filter function (fitting loess regression line)
loess.filter <- function (x, span) loess(formula = paste(x, "id", sep = "~"),
data = curr.scan.state,
degree = 1,
span = span)$fitted
## apply filter column-by-column
loess.graph.data <- as.data.frame(lapply(vars, loess.filter, span = smoothing.span),
col.names = colnames(curr.scan.state))
sample.rows <- length(loess.graph.data[[1,]])
loess.graph.data <- loess.graph.data %>% mutate("sample.diameters" = curr.scan.state$sample.diameters[1:sample.rows])
}
test.loess <- applyLoessSmooth(curr.scan.state, 0.5)
curr.scan.state <- graph.data$`sample 1`
curr.scan.state <- graph.data$`sample 1`
vars <- colnames(curr.scan.state)
id <- 1:nrow(curr.scan.state)
loess.filter <- function (x, span) loess(formula = paste(x, "id", sep = "~"),
data = curr.scan.state,
degree = 1,
span = span)$fitted
loess.graph.data <- as.data.frame(lapply(vars, loess.filter, span = smoothing.span),
col.names = colnames(curr.scan.state))
smoothing.span <- 0.5
loess.graph.data <- as.data.frame(lapply(vars, loess.filter, span = smoothing.span),
col.names = colnames(curr.scan.state))
sample.rows <- length(loess.graph.data[[1,]])
sample.rows <- length(loess.graph.data[[1,]])
sample.rows <- length(loess.graph.data[1,])
sample.rows <- length(loess.graph.data[1,1])
View(curr.scan.state)
sample.rows <- length(loess.graph.data[,1])
loess.graph.data <- loess.graph.data %>% mutate("sample.diameters" = curr.scan.state$sample.diameters[1:sample.rows])
applyLoessSmooth <- function(curr.scan.state, smoothing.span) {
## response
vars <- colnames(curr.scan.state)
## covariate
id <- 1:nrow(curr.scan.state)
## define a loess filter function (fitting loess regression line)
loess.filter <- function (x, span) loess(formula = paste(x, "id", sep = "~"),
data = curr.scan.state,
degree = 1,
span = span)$fitted
## apply filter column-by-column
loess.graph.data <- as.data.frame(lapply(vars, loess.filter, span = smoothing.span),
col.names = colnames(curr.scan.state))
sample.rows <- length(loess.graph.data[,1])
loess.graph.data <- loess.graph.data %>% mutate("sample.diameters" = curr.scan.state$sample.diameters[1:sample.rows])
}
test.loess <- applyLoessSmooth(curr.scan.state, 0.5)
curr.scan.state <- dropScan(curr.scan.state, "scan1")
test.loess <- applyLoessSmooth(curr.scan.state, 0.5)
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
shiny::runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
diameter.row.index <- grep("^Raw", raw.scans.file[,1])
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
