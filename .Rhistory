# Remove any columns that contain NA values that may have resulted from given files having irregular sizes (i.e, 46 labels for 47 scans)
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
# If a Sparklink file was provided, add sample names.
if (!is.null(sparklink.file)) {
sample.names <- c("Sample Name", sparklink.file[,4])
if (nrow(sample.names) > (length(graph.data) + 1)) {
sample.names <- rbind(sample.names,
c(paste0("unnamed sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
}
avg.scans <- avg.scans %>%
rbind(sample.names)
}
# Add a row containing the "Diameter" and matching "inj" labels for each sample
avg.scans <- avg.scans %>%
rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
avg.scans <- as.data.frame(avg.scans, stringsAsFactors = FALSE)
if (!is.null(graph.data)) {
# Retrieves the diameters from the first set of sample data. The diameters should be the same for every dataset.
avg.sample.data <- as.character(graph.data[[1]]$sample.diameters)
graph.index <- 1
# For loop bound is set to the size of avg.scans so unlabeled samples are not included
for (i in 1:(ncol(avg.scans) - 1)) {
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
avg.sample.data <- avg.sample.data %>%
cbind(as.character(current.sample.means))
graph.index <- graph.index + 1
}
avg.sample.data <- as.data.frame(avg.sample.data, stringsAsFactors = FALSE)
names(avg.sample.data) <- names(avg.scans)
avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
return(avg.scans)
}
test4 <- getAverageScans(graph.data, sparklink.file)
getAverageScans <- function(graph.data, sparklink.file = NULL) {
# Add the overall sample labels to the graph, which should have been generated already for the graph data
avg.scans <-  rbind(c("Sample Label", names(graph.data)))
# Remove any columns that contain NA values that may have resulted from given files having irregular sizes (i.e, 46 labels for 47 scans)
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
# If a Sparklink file was provided, add sample names.
if (!is.null(sparklink.file)) {
sample.names <- c("Sample Name", sparklink.file[,4])
print(is.null(sample.names))
print(is.null(graph.data))
if (nrow(sample.names) > (length(graph.data) + 1)) {
sample.names <- rbind(sample.names,
c(paste0("unnamed sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
}
avg.scans <- avg.scans %>%
rbind(sample.names)
}
# Add a row containing the "Diameter" and matching "inj" labels for each sample
avg.scans <- avg.scans %>%
rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
avg.scans <- as.data.frame(avg.scans, stringsAsFactors = FALSE)
if (!is.null(graph.data)) {
# Retrieves the diameters from the first set of sample data. The diameters should be the same for every dataset.
avg.sample.data <- as.character(graph.data[[1]]$sample.diameters)
graph.index <- 1
# For loop bound is set to the size of avg.scans so unlabeled samples are not included
for (i in 1:(ncol(avg.scans) - 1)) {
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
avg.sample.data <- avg.sample.data %>%
cbind(as.character(current.sample.means))
graph.index <- graph.index + 1
}
avg.sample.data <- as.data.frame(avg.sample.data, stringsAsFactors = FALSE)
names(avg.sample.data) <- names(avg.scans)
avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
return(avg.scans)
}
test4 <- getAverageScans(graph.data, sparklink.file)
nrow(sample.names) > (length(graph.data) + 1)
nrow(sample.names) < (length(graph.data) + 1)
getAverageScans <- function(graph.data, sparklink.file = NULL) {
# Add the overall sample labels to the graph, which should have been generated already for the graph data
avg.scans <-  rbind(c("Sample Label", names(graph.data)))
# Remove any columns that contain NA values that may have resulted from given files having irregular sizes (i.e, 46 labels for 47 scans)
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
# If a Sparklink file was provided, add sample names.
if (!is.null(sparklink.file)) {
sample.names <- c("Sample Name", sparklink.file[,4])
if (nrow(sample.names) < (length(graph.data) + 1)) {
sample.names <- rbind(sample.names,
c(paste0("unnamed sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
}
avg.scans <- avg.scans %>%
rbind(sample.names)
}
# Add a row containing the "Diameter" and matching "inj" labels for each sample
avg.scans <- avg.scans %>%
rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
avg.scans <- as.data.frame(avg.scans, stringsAsFactors = FALSE)
if (!is.null(graph.data)) {
# Retrieves the diameters from the first set of sample data. The diameters should be the same for every dataset.
avg.sample.data <- as.character(graph.data[[1]]$sample.diameters)
graph.index <- 1
# For loop bound is set to the size of avg.scans so unlabeled samples are not included
for (i in 1:(ncol(avg.scans) - 1)) {
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
avg.sample.data <- avg.sample.data %>%
cbind(as.character(current.sample.means))
graph.index <- graph.index + 1
}
avg.sample.data <- as.data.frame(avg.sample.data, stringsAsFactors = FALSE)
names(avg.sample.data) <- names(avg.scans)
avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
return(avg.scans)
}
test4 <- getAverageScans(graph.data, sparklink.file)
value <- nrow(sample.names) < (length(graph.data) + 1)
getAverageScans <- function(graph.data, sparklink.file = NULL) {
# Add the overall sample labels to the graph, which should have been generated already for the graph data
avg.scans <-  rbind(c("Sample Label", names(graph.data)))
# Remove any columns that contain NA values that may have resulted from given files having irregular sizes (i.e, 46 labels for 47 scans)
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
# If a Sparklink file was provided, add sample names.
if (!is.null(sparklink.file)) {
sample.names <- c("Sample Name", sparklink.file[,4])
value <- nrow(sample.names) < (length(graph.data) + 1)
if (value) {
sample.names <- rbind(sample.names,
c(paste0("unnamed sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
}
avg.scans <- avg.scans %>%
rbind(sample.names)
}
# Add a row containing the "Diameter" and matching "inj" labels for each sample
avg.scans <- avg.scans %>%
rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
avg.scans <- as.data.frame(avg.scans, stringsAsFactors = FALSE)
if (!is.null(graph.data)) {
# Retrieves the diameters from the first set of sample data. The diameters should be the same for every dataset.
avg.sample.data <- as.character(graph.data[[1]]$sample.diameters)
graph.index <- 1
# For loop bound is set to the size of avg.scans so unlabeled samples are not included
for (i in 1:(ncol(avg.scans) - 1)) {
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
avg.sample.data <- avg.sample.data %>%
cbind(as.character(current.sample.means))
graph.index <- graph.index + 1
}
avg.sample.data <- as.data.frame(avg.sample.data, stringsAsFactors = FALSE)
names(avg.sample.data) <- names(avg.scans)
avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
return(avg.scans)
}
test4 <- getAverageScans(graph.data, sparklink.file)
length(value)
sparklink.file <- read.csv("data\\170622_Study114_Runlist.csv", stringsAsFactors = FALSE, header = FALSE)
graph.data <- scanGraphData(read.csv("data\\170622_Study114_AIM.csv", stringsAsFactors = FALSE, na.strings = c("", NA)), sparklink.file)
test4 <- getAverageScans(graph.data, sparklink.file)
getAverageScans <- function(graph.data, sparklink.file = NULL) {
# Add the overall sample labels to the graph, which should have been generated already for the graph data
avg.scans <-  rbind(c("Sample Label", names(graph.data)))
# Remove any columns that contain NA values that may have resulted from given files having irregular sizes (i.e, 46 labels for 47 scans)
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
# If a Sparklink file was provided, add sample names.
if (!is.null(sparklink.file)) {
sample.names <- c("Sample Name", sparklink.file[,4])
value <- nrow(sample.names) < (length(graph.data) + 1)
print(length(value))
if (length(value) != 0 & value) {
sample.names <- rbind(sample.names,
c(paste0("unnamed sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
}
avg.scans <- avg.scans %>%
rbind(sample.names)
}
# Add a row containing the "Diameter" and matching "inj" labels for each sample
avg.scans <- avg.scans %>%
rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
avg.scans <- as.data.frame(avg.scans, stringsAsFactors = FALSE)
if (!is.null(graph.data)) {
# Retrieves the diameters from the first set of sample data. The diameters should be the same for every dataset.
avg.sample.data <- as.character(graph.data[[1]]$sample.diameters)
graph.index <- 1
# For loop bound is set to the size of avg.scans so unlabeled samples are not included
for (i in 1:(ncol(avg.scans) - 1)) {
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
avg.sample.data <- avg.sample.data %>%
cbind(as.character(current.sample.means))
graph.index <- graph.index + 1
}
avg.sample.data <- as.data.frame(avg.sample.data, stringsAsFactors = FALSE)
names(avg.sample.data) <- names(avg.scans)
avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
return(avg.scans)
}
test4 <- getAverageScans(graph.data, sparklink.file)
write.csv(test4, "test-averagescans.csv")
test4 <- getAverageScans(graph.data, sparklink.file)
getAverageScans <- function(graph.data, sparklink.file = NULL) {
# Add the overall sample labels to the graph, which should have been generated already for the graph data
avg.scans <-  rbind(c("Sample Label", names(graph.data)))
# Remove any columns that contain NA values that may have resulted from given files having irregular sizes (i.e, 46 labels for 47 scans)
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
# If a Sparklink file was provided, add sample names.
if (!is.null(sparklink.file)) {
sample.names <- c("Sample Name", sparklink.file[,4])
value <- nrow(sample.names) < (length(graph.data) + 1)
print(value)
print(length(value))
if (length(value) != 0 & value) {
sample.names <- rbind(sample.names,
c(paste0("unnamed sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
}
avg.scans <- avg.scans %>%
rbind(sample.names)
}
# Add a row containing the "Diameter" and matching "inj" labels for each sample
avg.scans <- avg.scans %>%
rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
avg.scans <- as.data.frame(avg.scans, stringsAsFactors = FALSE)
if (!is.null(graph.data)) {
# Retrieves the diameters from the first set of sample data. The diameters should be the same for every dataset.
avg.sample.data <- as.character(graph.data[[1]]$sample.diameters)
graph.index <- 1
# For loop bound is set to the size of avg.scans so unlabeled samples are not included
for (i in 1:(ncol(avg.scans) - 1)) {
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
avg.sample.data <- avg.sample.data %>%
cbind(as.character(current.sample.means))
graph.index <- graph.index + 1
}
avg.sample.data <- as.data.frame(avg.sample.data, stringsAsFactors = FALSE)
names(avg.sample.data) <- names(avg.scans)
avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
return(avg.scans)
}
test4 <- getAverageScans(graph.data, sparklink.file)
getAverageScans <- function(graph.data, sparklink.file = NULL) {
# Add the overall sample labels to the graph, which should have been generated already for the graph data
avg.scans <-  rbind(c("Sample Label", names(graph.data)))
# Remove any columns that contain NA values that may have resulted from given files having irregular sizes (i.e, 46 labels for 47 scans)
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
# If a Sparklink file was provided, add sample names.
if (!is.null(sparklink.file)) {
sample.names <- c("Sample Name", sparklink.file[,4])
print(sample.names)
print(nrow(sample.names) < (length(graph.data) + 1))
value <- nrow(sample.names) < (length(graph.data) + 1)
print(value)
print(length(value))
if (length(value) != 0 & value) {
sample.names <- rbind(sample.names,
c(paste0("unnamed sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
}
avg.scans <- avg.scans %>%
rbind(sample.names)
}
# Add a row containing the "Diameter" and matching "inj" labels for each sample
avg.scans <- avg.scans %>%
rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
avg.scans <- as.data.frame(avg.scans, stringsAsFactors = FALSE)
if (!is.null(graph.data)) {
# Retrieves the diameters from the first set of sample data. The diameters should be the same for every dataset.
avg.sample.data <- as.character(graph.data[[1]]$sample.diameters)
graph.index <- 1
# For loop bound is set to the size of avg.scans so unlabeled samples are not included
for (i in 1:(ncol(avg.scans) - 1)) {
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
avg.sample.data <- avg.sample.data %>%
cbind(as.character(current.sample.means))
graph.index <- graph.index + 1
}
avg.sample.data <- as.data.frame(avg.sample.data, stringsAsFactors = FALSE)
names(avg.sample.data) <- names(avg.scans)
avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
return(avg.scans)
}
test4 <- getAverageScans(graph.data, sparklink.file)
avg.scans <-  rbind(c("Sample Label", names(graph.data)))
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
sample.names <- c("Sample Name", sparklink.file[,4])
value <- nrow(sample.names) < (length(graph.data) + 1)
length(graph.data)
length(graph.data) + 1
nrow(sample.names) < length(graph.data) + 1
nrow(sample.names) < length(graph.data)
nrow(sample.names) = length(graph.data)
nrow(sample.names) == length(graph.data)
typeof(get(nrow(sample.names)))
typeof(get(length(graph.data)))
typeof((length(graph.data)))
typeof((nrow(sample.names)))
nrow(sample.names)
sample.names <- c("Sample Name", sparklink.file[,4])
nrow(sample.names)
ncol(sample.names)
sample.names <- c("Sample Name", sparklink.file[,4])
print(sample.names)
length(sample.names)
getAverageScans <- function(graph.data, sparklink.file = NULL) {
# Add the overall sample labels to the graph, which should have been generated already for the graph data
avg.scans <-  rbind(c("Sample Label", names(graph.data)))
# Remove any columns that contain NA values that may have resulted from given files having irregular sizes (i.e, 46 labels for 47 scans)
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
# If a Sparklink file was provided, add sample names.
if (!is.null(sparklink.file)) {
sample.names <- c("Sample Name", sparklink.file[,4])
if (length(sample.names) < length(graph.data) + 1) {
sample.names <- rbind(sample.names,
c(paste0("unnamed sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
}
avg.scans <- avg.scans %>%
rbind(sample.names)
}
# Add a row containing the "Diameter" and matching "inj" labels for each sample
avg.scans <- avg.scans %>%
rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
avg.scans <- as.data.frame(avg.scans, stringsAsFactors = FALSE)
if (!is.null(graph.data)) {
# Retrieves the diameters from the first set of sample data. The diameters should be the same for every dataset.
avg.sample.data <- as.character(graph.data[[1]]$sample.diameters)
graph.index <- 1
# For loop bound is set to the size of avg.scans so unlabeled samples are not included
for (i in 1:(ncol(avg.scans) - 1)) {
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
avg.sample.data <- avg.sample.data %>%
cbind(as.character(current.sample.means))
graph.index <- graph.index + 1
}
avg.sample.data <- as.data.frame(avg.sample.data, stringsAsFactors = FALSE)
names(avg.sample.data) <- names(avg.scans)
avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
return(avg.scans)
}
test4 <- getAverageScans(graph.data, sparklink.file)
avg.scans <-  rbind(c("Sample Label", names(graph.data)))
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
sample.names <- c("Sample Name", sparklink.file[,4])
sample.size.difference <- (length(graph.data) + 1) - length(sample.names)
sample.names <- rbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names) + sample.size.difference)))
View(sample.names)
sample.names <- cbind(sample.names,
c(paste0("unlabeled sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
View(sample.names)
avg.scans <-  rbind(c("Sample Label", names(graph.data)))
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
sample.names <- c("Sample Name", sparklink.file[,4])
sample.size.difference <- (length(graph.data) + 1) - length(sample.names)
sample.names <- cbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names) + sample.size.difference)))
View(sample.names)
sample.names <- c("Sample Name", sparklink.file[,4])
sample.names <- rbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names) + sample.size.difference)))
View(sample.names)
sample.names <- rbind(c("Sample Name", sparklink.file[,4]))
View(sample.names)
sample.size.difference <- (length(graph.data) + 1) - length(sample.names)
sample.names <- rbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names) + sample.size.difference)))
View(sample.names)
sample.names <- cbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names) + sample.size.difference)))
View(sample.names)
(c("Sample Label", names(graph.data)))
avg.scans <-  rbind(c("Sample Label", names(graph.data)))
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
sample.names <- rbind(c("Sample Name", sparklink.file[,4]))
sample.size.difference <- (length(graph.data) + 1) - length(sample.names)
sample.names <- cbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names) + sample.size.difference)))
View(sample.names)
avg.scans <- avg.scans %>%
rbind(sample.names)
View(avg.scans)
getAverageScans <- function(graph.data, sparklink.file = NULL) {
# Add the overall sample labels to the graph, which should have been generated already for the graph data
avg.scans <-  rbind(c("Sample Label", names(graph.data)))
# Remove any columns that contain NA values that may have resulted from given files having irregular sizes (i.e, 46 labels for 47 scans)
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
# If a Sparklink file was provided, add sample names.
if (!is.null(sparklink.file)) {
sample.names <- rbind(c("Sample Name", sparklink.file[,4]))
sample.size.difference <- (length(graph.data) + 1) - length(sample.names)
if (length(sample.names) < length(graph.data) + 1) {
sample.names <- cbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names))))
}
avg.scans <- avg.scans %>%
rbind(sample.names)
}
# Add a row containing the "Diameter" and matching "inj" labels for each sample
avg.scans <- avg.scans %>%
rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
avg.scans <- as.data.frame(avg.scans, stringsAsFactors = FALSE)
if (!is.null(graph.data)) {
# Retrieves the diameters from the first set of sample data. The diameters should be the same for every dataset.
avg.sample.data <- as.character(graph.data[[1]]$sample.diameters)
graph.index <- 1
# For loop bound is set to the size of avg.scans so unlabeled samples are not included
for (i in 1:(ncol(avg.scans) - 1)) {
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
avg.sample.data <- avg.sample.data %>%
cbind(as.character(current.sample.means))
graph.index <- graph.index + 1
}
avg.sample.data <- as.data.frame(avg.sample.data, stringsAsFactors = FALSE)
names(avg.sample.data) <- names(avg.scans)
avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
return(avg.scans)
}
test4 <- getAverageScans(graph.data, sparklink.file)
View(test4)
avg.scans <- avg.scans[complete.cases(avg.scans),]
getAverageScans <- function(graph.data, sparklink.file = NULL) {
# Add the overall sample labels to the graph, which should have been generated already for the graph data
avg.scans <-  rbind(c("Sample Label", names(graph.data)))
# Remove any columns that contain NA values that may have resulted from given files having irregular sizes (i.e, 46 labels for 47 scans)
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
# If a Sparklink file was provided, add sample names.
if (!is.null(sparklink.file)) {
sample.names <- rbind(c("Sample Name", sparklink.file[,4]))
sample.size.difference <- (length(graph.data) + 1) - length(sample.names)
if (length(sample.names) < length(graph.data) + 1) {
sample.names <- cbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names))))
}
avg.scans <- avg.scans %>%
rbind(sample.names)
}
# Add a row containing the "Diameter" and matching "inj" labels for each sample
avg.scans <- avg.scans %>%
rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
avg.scans <- as.data.frame(avg.scans, stringsAsFactors = FALSE)
if (!is.null(graph.data)) {
# Retrieves the diameters from the first set of sample data. The diameters should be the same for every dataset.
avg.sample.data <- as.character(graph.data[[1]]$sample.diameters)
graph.index <- 1
# For loop bound is set to the size of avg.scans so unlabeled samples are not included
for (i in 1:(ncol(avg.scans) - 1)) {
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
avg.sample.data <- avg.sample.data %>%
cbind(as.character(current.sample.means))
graph.index <- graph.index + 1
}
avg.sample.data <- as.data.frame(avg.sample.data, stringsAsFactors = FALSE)
names(avg.sample.data) <- names(avg.scans)
avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
avg.scans <- avg.scans[complete.cases(avg.scans),]
return(avg.scans)
}
test4 <- getAverageScans(graph.data, sparklink.file)
View(test4)
write.csv(test4, "test-averagescans.csv")
write.csv(test4, "test-averagescans.csv")
write.csv(test4, "test-averagescans.csv", row.names = FALSE, col.names = FALSE)
write.table(test4, "test-averagescans.csv", row.names = FALSE, col.names = FALSE)
write.table(test4, "test-averagescans.csv", row.names = FALSE)
write.csv(test4, "test-averagescans.csv", row.names = FALSE)
write.csv2(test4, "test-averagescans.csv", row.names = FALSE, col.names = FALSE)
test4 <- getAverageScans(graph.data, sparklink.file)
shiny::runApp()
runApp()
runApp()
