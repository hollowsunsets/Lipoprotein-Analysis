print(sample.names.first.row)
print(sample.names.other.rows)
print(nrow(sample.names))
print(nrow(sample.times))
sample.names <- rbind(sample.names.first.row, sample.names.other.rows)
print(sample.names)
if (nrow(sample.names) <  nrow(sample.times)) {
print(nrow(sample.names)," is smaller than ", nrow(sample.times))
sample.size.difference <- nrow(sample.times) - nrow(sample.names)
sample.names <- rbind(sample.names,
c(paste0("unlabeled sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
print(sample.names)
}
sample.times$sample.name <- sample.names[,1]
} else {
sample.times$sample.name <- c(paste0("sample ", 1:(nrow(sample.times))))
}
return(sample.times)
scanTimeStamps <- function(raw.scans.file, raw.sparklink.file = NULL) {
# Removes all rows before and after the time stamps and the sample labels.
timestamp.start.index <- grep("^Sample #", raw.scans.file[,1])
timestamp.end.index <- grep("^Start", raw.scans.file[,1])
timestamp.df <- raw.scans.file[timestamp.start.index:timestamp.end.index,]
# Changes the column names of the time stamp dataframe to the first row, then
# deletes the first row.
colnames(timestamp.df) <- timestamp.df[1,]
timestamp.df <- timestamp.df[-1,]
# Selects only the relevant data (in this context only the columns that have information in them)
# All blank columns were set to NA when read in, and are now deleted.
timestamp.df <- timestamp.df[colSums(is.na(timestamp.df)) != nrow(timestamp.df)]
# Remove the first column of the dataframe containing labels
timestamp.df <- timestamp.df[,-1]
# Removes the first two scans of the six scans from the dataset
timestamp.df <- nthDelete(timestamp.df, 6, 1)
timestamp.df <- nthDelete(timestamp.df, 5, 1)
# Creates a dataframe from the start time and date for each scan
final.timestamps <- data.frame(start.time = parse_date_time(paste(timestamp.df[1,],
timestamp.df[2,]),
c("%d/%m/%Y %H:%M:%S",
"%m/%d/%y %H:%M:%S")))
# Creates columns of a rounded down start time and a rounded up end time to represent a flexible
# starting and end time to be graphed for each sample
number.of.samples <- floor((nrow(final.timestamps)/4)) * 4
sample.times <- data.frame(start.time = final.timestamps[(seq(1, to=number.of.samples, by=4)),],
end.time = final.timestamps[(seq(4, to=number.of.samples, by=4)),])
sample.times$start.time <- floor_date(sample.times$start.time, "minute")
sample.times$end.time <- ceiling_date(sample.times$end.time, "minute")
print(sample.times)
sample.names.first.row <- colnames(raw.sparklink.file)[3]
sample.names.other.rows <- raw.sparklink.file[,3:4]
# Data is labeled the same as the scan data itself to facilitate ease of access
if (!(is.null(raw.sparklink.file))) {
print("Sparklink file is not null")
print(sample.names.first.row)
print(sample.names.other.rows)
print(nrow(sample.names))
print(nrow(sample.times))
sample.names <- rbind(sample.names.first.row, sample.names.other.rows)
print(sample.names)
if (nrow(sample.names) <  nrow(sample.times)) {
print(nrow(sample.names)," is smaller than ", nrow(sample.times))
sample.size.difference <- nrow(sample.times) - nrow(sample.names)
sample.names <- rbind(sample.names,
c(paste0("unlabeled sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
print(sample.names)
}
sample.times$sample.name <- sample.names[,1]
} else {
sample.times$sample.name <- c(paste0("sample ", 1:(nrow(sample.times))))
}
return(sample.times)
}
sparklink.timestamps <- scanTimeStamps(raw.scans.file, raw.sparklink.file)
scanTimeStamps <- function(raw.scans.file, raw.sparklink.file = NULL) {
# Removes all rows before and after the time stamps and the sample labels.
timestamp.start.index <- grep("^Sample #", raw.scans.file[,1])
timestamp.end.index <- grep("^Start", raw.scans.file[,1])
timestamp.df <- raw.scans.file[timestamp.start.index:timestamp.end.index,]
# Changes the column names of the time stamp dataframe to the first row, then
# deletes the first row.
colnames(timestamp.df) <- timestamp.df[1,]
timestamp.df <- timestamp.df[-1,]
# Selects only the relevant data (in this context only the columns that have information in them)
# All blank columns were set to NA when read in, and are now deleted.
timestamp.df <- timestamp.df[colSums(is.na(timestamp.df)) != nrow(timestamp.df)]
# Remove the first column of the dataframe containing labels
timestamp.df <- timestamp.df[,-1]
# Removes the first two scans of the six scans from the dataset
timestamp.df <- nthDelete(timestamp.df, 6, 1)
timestamp.df <- nthDelete(timestamp.df, 5, 1)
# Creates a dataframe from the start time and date for each scan
final.timestamps <- data.frame(start.time = parse_date_time(paste(timestamp.df[1,],
timestamp.df[2,]),
c("%d/%m/%Y %H:%M:%S",
"%m/%d/%y %H:%M:%S")))
# Creates columns of a rounded down start time and a rounded up end time to represent a flexible
# starting and end time to be graphed for each sample
number.of.samples <- floor((nrow(final.timestamps)/4)) * 4
sample.times <- data.frame(start.time = final.timestamps[(seq(1, to=number.of.samples, by=4)),],
end.time = final.timestamps[(seq(4, to=number.of.samples, by=4)),])
sample.times$start.time <- floor_date(sample.times$start.time, "minute")
sample.times$end.time <- ceiling_date(sample.times$end.time, "minute")
print(sample.times)
sample.names.first.row <- colnames(raw.sparklink.file)[3]
sample.names.other.rows <- raw.sparklink.file[,3:4]
# Data is labeled the same as the scan data itself to facilitate ease of access
if (!(is.null(raw.sparklink.file))) {
print("Sparklink file is not null")
print(sample.names.first.row)
print(sample.names.other.rows)
print(nrow(sample.names))
print(nrow(sample.times))
sample.names <- rbind(sample.names.first.row, sample.names.other.rows)
print(sample.names)
if (nrow(sample.names) <  nrow(sample.times)) {
print(nrow(sample.names))
print(" is smaller than ")
print(nrow(sample.times))
sample.size.difference <- nrow(sample.times) - nrow(sample.names)
sample.names <- rbind(sample.names,
c(paste0("unlabeled sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
print(sample.names)
}
sample.times$sample.name <- sample.names[,1]
} else {
sample.times$sample.name <- c(paste0("sample ", 1:(nrow(sample.times))))
}
return(sample.times)
}
sparklink.timestamps <- scanTimeStamps(raw.scans.file, raw.sparklink.file)
View(sparklink.timestamps)
source("file-setup.R")
source("graph-alteration.R")
shiny::runApp()
runApp()
View(raw.sparklink.file)
View(raw.scans.file)
raw.sparklink.file <- read.csv("data\\170622_Study114_Runlist.csv", stringsAsFactors = FALSE, header = FALSE)
View(raw.sparklink.file)
sparklink.timestamps <- scanTimeStamps(raw.scans.file, raw.sparklink.file)
View(sparklink.timestamps)
sample.names.first.row <- colnames(raw.sparklink.file)[3]
sample.names <- raw.sparklink.file[,3]
# Removes all rows before and after the time stamps and the sample labels.
timestamp.start.index <- grep("^Sample #", raw.scans.file[,1])
timestamp.end.index <- grep("^Start", raw.scans.file[,1])
timestamp.df <- raw.scans.file[timestamp.start.index:timestamp.end.index,]
# Changes the column names of the time stamp dataframe to the first row, then
# deletes the first row.
colnames(timestamp.df) <- timestamp.df[1,]
timestamp.df <- timestamp.df[-1,]
# Selects only the relevant data (in this context only the columns that have information in them)
# All blank columns were set to NA when read in, and are now deleted.
timestamp.df <- timestamp.df[colSums(is.na(timestamp.df)) != nrow(timestamp.df)]
# Remove the first column of the dataframe containing labels
timestamp.df <- timestamp.df[,-1]
# Removes the first two scans of the six scans from the dataset
timestamp.df <- nthDelete(timestamp.df, 6, 1)
timestamp.df <- nthDelete(timestamp.df, 5, 1)
# Creates a dataframe from the start time and date for each scan
final.timestamps <- data.frame(start.time = parse_date_time(paste(timestamp.df[1,],
timestamp.df[2,]),
c("%d/%m/%Y %H:%M:%S",
"%m/%d/%y %H:%M:%S")))
# Creates columns of a rounded down start time and a rounded up end time to represent a flexible
# starting and end time to be graphed for each sample
number.of.samples <- floor((nrow(final.timestamps)/4)) * 4
sample.times <- data.frame(start.time = final.timestamps[(seq(1, to=number.of.samples, by=4)),],
end.time = final.timestamps[(seq(4, to=number.of.samples, by=4)),])
sample.times$start.time <- floor_date(sample.times$start.time, "minute")
sample.times$end.time <- ceiling_date(sample.times$end.time, "minute")
sample.size.difference <- nrow(sample.times) - nrow(sample.names)
sparklink.timestamps <- scanTimeStamps(raw.scans.file, raw.sparklink.file)
View(sparklink.timestamps)
scanTimeStamps <- function(raw.scans.file, raw.sparklink.file = NULL) {
# Removes all rows before and after the time stamps and the sample labels.
timestamp.start.index <- grep("^Sample #", raw.scans.file[,1])
timestamp.end.index <- grep("^Start", raw.scans.file[,1])
timestamp.df <- raw.scans.file[timestamp.start.index:timestamp.end.index,]
# Changes the column names of the time stamp dataframe to the first row, then
# deletes the first row.
colnames(timestamp.df) <- timestamp.df[1,]
timestamp.df <- timestamp.df[-1,]
# Selects only the relevant data (in this context only the columns that have information in them)
# All blank columns were set to NA when read in, and are now deleted.
timestamp.df <- timestamp.df[colSums(is.na(timestamp.df)) != nrow(timestamp.df)]
# Remove the first column of the dataframe containing labels
timestamp.df <- timestamp.df[,-1]
# Removes the first two scans of the six scans from the dataset
timestamp.df <- nthDelete(timestamp.df, 6, 1)
timestamp.df <- nthDelete(timestamp.df, 5, 1)
# Creates a dataframe from the start time and date for each scan
final.timestamps <- data.frame(start.time = parse_date_time(paste(timestamp.df[1,],
timestamp.df[2,]),
c("%d/%m/%Y %H:%M:%S",
"%m/%d/%y %H:%M:%S")))
# Creates columns of a rounded down start time and a rounded up end time to represent a flexible
# starting and end time to be graphed for each sample
number.of.samples <- floor((nrow(final.timestamps)/4)) * 4
sample.times <- data.frame(start.time = final.timestamps[(seq(1, to=number.of.samples, by=4)),],
end.time = final.timestamps[(seq(4, to=number.of.samples, by=4)),])
sample.times$start.time <- floor_date(sample.times$start.time, "minute")
sample.times$end.time <- ceiling_date(sample.times$end.time, "minute")
sample.names <- raw.sparklink.file[,3]
# Data is labeled the same as the scan data itself to facilitate ease of access
if (!(is.null(raw.sparklink.file))) {
if (nrow(sample.names) <  nrow(sample.times)) {
sample.size.difference <- nrow(sample.times) - nrow(sample.names)
sample.names <- rbind(sample.names,
c(paste0("unlabeled sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
}
sample.times$sample.name <- sample.names[,1]
} else {
sample.times$sample.name <- c(paste0("sample ", 1:(nrow(sample.times))))
}
return(sample.times)
}
sparklink.timestamps <- scanTimeStamps(raw.scans.file, raw.sparklink.file)
sparklink.timestamps <- scanTimeStamps(raw.scans.file, raw.sparklink.file)
scanTimeStamps <- function(raw.scans.file, raw.sparklink.file = NULL) {
# Removes all rows before and after the time stamps and the sample labels.
timestamp.start.index <- grep("^Sample #", raw.scans.file[,1])
timestamp.end.index <- grep("^Start", raw.scans.file[,1])
timestamp.df <- raw.scans.file[timestamp.start.index:timestamp.end.index,]
# Changes the column names of the time stamp dataframe to the first row, then
# deletes the first row.
colnames(timestamp.df) <- timestamp.df[1,]
timestamp.df <- timestamp.df[-1,]
# Selects only the relevant data (in this context only the columns that have information in them)
# All blank columns were set to NA when read in, and are now deleted.
timestamp.df <- timestamp.df[colSums(is.na(timestamp.df)) != nrow(timestamp.df)]
# Remove the first column of the dataframe containing labels
timestamp.df <- timestamp.df[,-1]
# Removes the first two scans of the six scans from the dataset
timestamp.df <- nthDelete(timestamp.df, 6, 1)
timestamp.df <- nthDelete(timestamp.df, 5, 1)
# Creates a dataframe from the start time and date for each scan
final.timestamps <- data.frame(start.time = parse_date_time(paste(timestamp.df[1,],
timestamp.df[2,]),
c("%d/%m/%Y %H:%M:%S",
"%m/%d/%y %H:%M:%S")))
# Creates columns of a rounded down start time and a rounded up end time to represent a flexible
# starting and end time to be graphed for each sample
number.of.samples <- floor((nrow(final.timestamps)/4)) * 4
sample.times <- data.frame(start.time = final.timestamps[(seq(1, to=number.of.samples, by=4)),],
end.time = final.timestamps[(seq(4, to=number.of.samples, by=4)),])
sample.times$start.time <- floor_date(sample.times$start.time, "minute")
sample.times$end.time <- ceiling_date(sample.times$end.time, "minute")
sample.names <- raw.sparklink.file[,3]
# Data is labeled the same as the scan data itself to facilitate ease of access
if (!(is.null(raw.sparklink.file))) {
print(nrow(sample.names))
print(nrow(sample.times))
if (nrow(sample.names) < nrow(sample.times)) {
sample.size.difference <- nrow(sample.times) - nrow(sample.names)
sample.names <- rbind(sample.names,
c(paste0("unlabeled sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
}
sample.times$sample.name <- sample.names[,1]
} else {
sample.times$sample.name <- c(paste0("sample ", 1:(nrow(sample.times))))
}
return(sample.times)
}
raw.scans.file <- read.csv("data\\170622_Study114_AIM.csv", stringsAsFactors = FALSE, na.strings = c("", NA))
sparklink.timestamps <- scanTimeStamps(raw.scans.file, raw.sparklink.file)
sparklink.timestamps <- scanTimeStamps(raw.scans.file, raw.sparklink.file)
sample.names <- raw.sparklink.file[,3]
View(raw.sparklink.file)
raw.sparklink.file <- read.csv("data\\170622_Study114_Runlist.csv", stringsAsFactors = FALSE, header = FALSE)
sparklink.timestamps <- scanTimeStamps(raw.scans.file, raw.sparklink.file)
nrow(sample.names) < nrow(sample.times
# Data is labeled the same as the scan data itself to facilitate ease of access
if (!(is.null(raw.sparklink.file))) {
sample.names <- raw.sparklink.file[,3]
print(nrow(sample.names))
print(nrow(sample.times))
if (nrow(sample.names) < nrow(sample.times)) {
sample.size.difference <- nrow(sample.times) - nrow(sample.names)
sample.names <- rbind(sample.names,
c(paste0("unlabeled sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
}
sample.times$sample.name <- sample.names[,1]
} else {
sample.times$sample.name <- c(paste0("sample ", 1:(nrow(sample.times))))
}
return(sample.times)
}
# scan.graph.data <- scanGraphData(raw.scans.file)
# scan.timestamps <- scanTimeStamps(raw.scans.file)
# Function for setting the column names of the graph data so the
# data processing doesn't have to be run through again.
# Assumed format is Sparklink labels format.
setGraphLabels <- function(graph.labels, graph.data) {
names(graph.data) <- graph.labels[,1] # Is this even used? It's just one line and it's already run in the file processing itself
}
# Returns a data frame to be graphed from the given amplog file.
ampGraphData <- function(raw.amplog.file) {
print("Raw amp data was passed through read.xlsx. Now selecting relevant data (time and amperage)")
amp.graph.data <- raw.amplog.file %>% select(X0, X2)
print("Amperage data selection is complete. Returning file.")
return(amp.graph.data)
}
# Get start time
# Get end time
# Create interval that ranges -3 min, +3 min (this improves visibility of data and catches timestamps that don't exactly match)
## i.e: start time = 1:05 PM, end time = 1:15 PM
## interval: 1:02 PM - 1:18 PM
# Get all times and amperage contained within that interval
## Either use [start:end] indexing or use %in% to check inside the interval
intervalAmperageData <- function(amp.graph.data, start.time, end.time) {
print("Time interval for graph data is being processed.")
print("Start time: ")
print(start.time)
print("End time: ")
print(end.time)
selected.interval <- as.interval(start.time - (3 * 60), end.time + (3 * 60))
print("Selected interval:")
print(selected.interval)
selected.amp.times <- amp.graph.data[,1][amp.graph.data$X0 %within% selected.interval]
print(selected.amp.times)
print("Amperage graph data has been filtered to the given start and end time.")
selected.amp.data <- amp.graph.data %>% filter(X0 %in% selected.amp.times)
return(selected.amp.data)
}
# Deletes every nth column in the given data frame, beginning from the
# given starting index, i.
nthDelete <- function(data.frame, n, i) {
data.frame[,-(seq(i, to=ncol(data.frame), by=n))]
}
nrow(sample.names) < nrow(sample.times)
sample.times <- data.frame(start.time = final.timestamps[(seq(1, to=number.of.samples, by=4)),],
end.time = final.timestamps[(seq(4, to=number.of.samples, by=4)),])
nrow(sample.names) < nrow(sample.times)
nrow(sample.times)
nrow(sample.times)
test <- nrow(sample.names) < nrow(sample.times)
if (nrow(sample.names) < nrow(sample.times)) {
sample.size.difference <- nrow(sample.times) - nrow(sample.names)
sample.names <- rbind(sample.names,
c(paste0("unlabeled sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
}
sample.size.difference <- nrow(sample.times) - nrow(sample.names)
sample.names <- raw.sparklink.file[,3]
sample.times <- data.frame(start.time = final.timestamps[(seq(1, to=number.of.samples, by=4)),],
end.time = final.timestamps[(seq(4, to=number.of.samples, by=4)),])
print(nrow(sample.times))
print(nrow(sample.names))
print(length(sample.names))
scanTimeStamps <- function(raw.scans.file, raw.sparklink.file = NULL) {
# Removes all rows before and after the time stamps and the sample labels.
timestamp.start.index <- grep("^Sample #", raw.scans.file[,1])
timestamp.end.index <- grep("^Start", raw.scans.file[,1])
timestamp.df <- raw.scans.file[timestamp.start.index:timestamp.end.index,]
# Changes the column names of the time stamp dataframe to the first row, then
# deletes the first row.
colnames(timestamp.df) <- timestamp.df[1,]
timestamp.df <- timestamp.df[-1,]
# Selects only the relevant data (in this context only the columns that have information in them)
# All blank columns were set to NA when read in, and are now deleted.
timestamp.df <- timestamp.df[colSums(is.na(timestamp.df)) != nrow(timestamp.df)]
# Remove the first column of the dataframe containing labels
timestamp.df <- timestamp.df[,-1]
# Removes the first two scans of the six scans from the dataset
timestamp.df <- nthDelete(timestamp.df, 6, 1)
timestamp.df <- nthDelete(timestamp.df, 5, 1)
# Creates a dataframe from the start time and date for each scan
final.timestamps <- data.frame(start.time = parse_date_time(paste(timestamp.df[1,],
timestamp.df[2,]),
c("%d/%m/%Y %H:%M:%S",
"%m/%d/%y %H:%M:%S")))
# Creates columns of a rounded down start time and a rounded up end time to represent a flexible
# starting and end time to be graphed for each sample
number.of.samples <- floor((nrow(final.timestamps)/4)) * 4
sample.times <- data.frame(start.time = final.timestamps[(seq(1, to=number.of.samples, by=4)),],
end.time = final.timestamps[(seq(4, to=number.of.samples, by=4)),])
sample.times$start.time <- floor_date(sample.times$start.time, "minute")
sample.times$end.time <- ceiling_date(sample.times$end.time, "minute")
test <- nrow(sample.names) < nrow(sample.times)
# Data is labeled the same as the scan data itself to facilitate ease of access
if (!(is.null(raw.sparklink.file))) {
sample.names <- raw.sparklink.file[,3]
sample.size.difference <- nrow(sample.times) - length(sample.names)
if (length(sample.names) < nrow(sample.times)) {
sample.names <- rbind(sample.names,
c(paste0("unlabeled sample ",
length(sample.names):
length(sample.names) + sample.size.difference)))
}
sample.times$sample.name <- sample.names[,1]
} else {
sample.times$sample.name <- c(paste0("sample ", 1:(nrow(sample.times))))
}
return(sample.times)
}
sparklink.timestamps <- scanTimeStamps(raw.scans.file, raw.sparklink.file)
sample.names <- as.data.frame(raw.sparklink.file[,3])
View(sample.names)
sample.size.difference <- nrow(sample.times) - nrow(sample.names)
sample.names <- cbind(sample.names,
c(paste0("unlabeled sample ",
length(sample.names):
length(sample.names) + sample.size.difference)))
View(sample.names)
sample.names <- cbind(sample.names,
c(paste0("unlabeled sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
View(sample.names)
sample.names <- as.data.frame(raw.sparklink.file[,3])
sample.names <- cbind(sample.names,
c(paste0("unlabeled sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
sample.names <- as.data.frame(raw.sparklink.file[,3])
sample.names <- rbind(sample.names,
c(paste0("unlabeled sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
View(sample.names)
sample.names <- as.data.frame(raw.sparklink.file[,3], stringsAsFactors = FALSE)
sample.names <- as.data.frame(sample.names = raw.sparklink.file[,3], stringsAsFactors = FALSE)
sample.names <- as.data.frame("sample.names" = raw.sparklink.file[,3], stringsAsFactors = FALSE)
sample.names <- as.data.frame(raw.sparklink.file[,3], stringsAsFactors = FALSE)
sample.size.difference <- nrow(sample.times) - nrow(sample.names)
sample.names <- rbind(sample.names,
c(paste0("unlabeled sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
scanTimeStamps <- function(raw.scans.file, raw.sparklink.file = NULL) {
# Removes all rows before and after the time stamps and the sample labels.
timestamp.start.index <- grep("^Sample #", raw.scans.file[,1])
timestamp.end.index <- grep("^Start", raw.scans.file[,1])
timestamp.df <- raw.scans.file[timestamp.start.index:timestamp.end.index,]
# Changes the column names of the time stamp dataframe to the first row, then
# deletes the first row.
colnames(timestamp.df) <- timestamp.df[1,]
timestamp.df <- timestamp.df[-1,]
# Selects only the relevant data (in this context only the columns that have information in them)
# All blank columns were set to NA when read in, and are now deleted.
timestamp.df <- timestamp.df[colSums(is.na(timestamp.df)) != nrow(timestamp.df)]
# Remove the first column of the dataframe containing labels
timestamp.df <- timestamp.df[,-1]
# Removes the first two scans of the six scans from the dataset
timestamp.df <- nthDelete(timestamp.df, 6, 1)
timestamp.df <- nthDelete(timestamp.df, 5, 1)
# Creates a dataframe from the start time and date for each scan
final.timestamps <- data.frame(start.time = parse_date_time(paste(timestamp.df[1,],
timestamp.df[2,]),
c("%d/%m/%Y %H:%M:%S",
"%m/%d/%y %H:%M:%S")))
# Creates columns of a rounded down start time and a rounded up end time to represent a flexible
# starting and end time to be graphed for each sample
number.of.samples <- floor((nrow(final.timestamps)/4)) * 4
sample.times <- data.frame(start.time = final.timestamps[(seq(1, to=number.of.samples, by=4)),],
end.time = final.timestamps[(seq(4, to=number.of.samples, by=4)),])
sample.times$start.time <- floor_date(sample.times$start.time, "minute")
sample.times$end.time <- ceiling_date(sample.times$end.time, "minute")
test <- nrow(sample.names) < nrow(sample.times)
# Data is labeled the same as the scan data itself to facilitate ease of access
if (!(is.null(raw.sparklink.file))) {
sample.names <- as.data.frame(raw.sparklink.file[,3], stringsAsFactors = FALSE)
sample.size.difference <- nrow(sample.times) - nrow(sample.names)
if (nrow(sample.names) < nrow(sample.times)) {
sample.names <- rbind(sample.names,
c(paste0("unlabeled sample ",
nrow(sample.names):
nrow(sample.names) + sample.size.difference)))
}
sample.times$sample.name <- sample.names[,1]
} else {
sample.times$sample.name <- c(paste0("sample ", 1:(nrow(sample.times))))
}
return(sample.times)
}
raw.sparklink.file <- read.csv("data\\170622_Study114_Runlist.csv", stringsAsFactors = FALSE, header = FALSE)
raw.scans.file <- read.csv("data\\170622_Study114_AIM.csv", stringsAsFactors = FALSE, na.strings = c("", NA))
sparklink.timestamps <- scanTimeStamps(raw.scans.file, raw.sparklink.file)
View(sparklink.timestamps)
source("file-setup.R")
runApp()
runApp()
View(amp.graph.data)
ampGraphData <- function(raw.amplog.file) {
print("Raw amp data was passed through read.xlsx. Now selecting relevant data (time and amperage)")
amp.graph.data <- raw.amplog.file %>% select(X0, X2)
print("Amperage data selection is complete. Returning file.")
return(amp.graph.data)
}
amp.graph.data <- ampGraphData(read_excel("data\\170712_Study114_Amplog.xlsx", col_names = FALSE))
setwd("~/Jobs/Spring 2017/DMEN Assistant/dmen-vis")
amp.graph.data <- ampGraphData(read_excel("data\\170712_Study114_Amplog.xlsx", col_names = FALSE))
amp.graph.data <- ampGraphData(read_excel("data\\170712_Study115_Batch3_Amplog.xlsx", col_names = FALSE))
View(amp.graph.data)
test.amprange <- intervalAmperageData(amp.graph.data, amp.graph.data$X0[1],
amp.graph.data$X0[1] + (12 * 60))
test.amprange <- intervalAmperageData(amp.graph.data, amp.graph.data$X0[1],
amp.graph.data$X0[1] + (12 * 60))
