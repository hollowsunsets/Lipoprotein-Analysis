timestamp.df <- timestamp.df[-1,]
# Selects only the relevant data (in this context only the columns that have information in them)
timestamp.df <- timestamp.df[colSums(is.na(timestamp.df)) != nrow(timestamp.df)]
# Remove the first column of the dataframe containing labels
timestamp.df <- timestamp.df[,-1]
# Removes the first two scans of the six scans from the dataset (preserving label of date and start time)
timestamp.df <- nthDelete(timestamp.df, 6, 1)
timestamp.df <- nthDelete(timestamp.df, 5, 1)
# Convert the date and start time rows to a datetime object
timestamp.df[3,] <- dmy_hms(paste(timestamp.df[1,], timestamp.df[2,]))
anytime(1495469247)
timestamp.df[3,] <- anytime(timestamp.df[3,])
test.date <- as.POSIXct(paste("22/5/2017", "12:13:28"), format="%d/%m/%Y %H:%M:%S")
test.date
test.date <- as.POSIXct(paste("22/5/2017", "12:13:28"), format="%d/%m/%Y %H:%M:%S", value = NA)
test.date <- as.POSIXct(paste(timestamp.df[1,], timestamp.df[1,]), format="%d/%m/%Y %H:%M:%S", value = NA)
timestamp.start.index <- grep("^Sample #", raw.scans.file[,1])
timestamp.end.index <- grep("^Start", raw.scans.file[,1])
timestamp.df <- raw.scans.file[timestamp.start.index:timestamp.end.index,]
# Changes the column names of the time stamp dataframe to the first row, then
# deletes the first row.
colnames(timestamp.df) <- timestamp.df[1,]
timestamp.df <- timestamp.df[-1,]
# Selects only the relevant data (in this context only the columns that have information in them)
timestamp.df <- timestamp.df[colSums(is.na(timestamp.df)) != nrow(timestamp.df)]
# Remove the first column of the dataframe containing labels
timestamp.df <- timestamp.df[,-1]
# Removes the first two scans of the six scans from the dataset (preserving label of date and start time)
timestamp.df <- nthDelete(timestamp.df, 6, 1)
timestamp.df <- nthDelete(timestamp.df, 5, 1)
test.date <- as.POSIXct(paste(timestamp.df[1,], timestamp.df[2,]), format="%d/%m/%Y %H:%M:%S", value = NA)
timestamp.df[3,] <- as.POSIXct(paste(timestamp.df[1,], timestamp.df[2,]), format="%d/%m/%Y %H:%M:%S", value = NA)
test.df <- as.POSIXct(paste(timestamp.df[1,], timestamp.df[2,]), format="%d/%m/%Y %H:%M:%S", value = NA)
test.df <- as.data.frame(as.POSIXct(paste(timestamp.df[1,], timestamp.df[2,]), format="%d/%m/%Y %H:%M:%S", value = NA))
View(test.df)
test.df <- as.data.frame(starttime = as.POSIXct(paste(timestamp.df[1,], timestamp.df[2,]), format="%d/%m/%Y %H:%M:%S", value = NA))
test.df <- as.data.frame("starttime" = as.POSIXct(paste(timestamp.df[1,], timestamp.df[2,]), format="%d/%m/%Y %H:%M:%S", value = NA))
test.df <- data.frame(start.time = as.POSIXct(paste(timestamp.df[1,], timestamp.df[2,]), format="%d/%m/%Y %H:%M:%S", value = NA))
View(test.df)
# Removes all rows before and after the time stamps and the sample labels.
timestamp.start.index <- grep("^Sample #", raw.scans.file[,1])
timestamp.end.index <- grep("^Start", raw.scans.file[,1])
timestamp.df <- raw.scans.file[timestamp.start.index:timestamp.end.index,]
# Changes the column names of the time stamp dataframe to the first row, then
# deletes the first row.
colnames(timestamp.df) <- timestamp.df[1,]
timestamp.df <- timestamp.df[-1,]
# Selects only the relevant data (in this context only the columns that have information in them)
timestamp.df <- timestamp.df[colSums(is.na(timestamp.df)) != nrow(timestamp.df)]
# Remove the first column of the dataframe containing labels
timestamp.df <- timestamp.df[,-1]
# Removes the first two scans of the six scans from the dataset (preserving label of date and start time)
timestamp.df <- nthDelete(timestamp.df, 6, 1)
timestamp.df <- nthDelete(timestamp.df, 5, 1)
# Creates a dataframe from the start time and date for each scan
final.timestamps <- data.frame(start.time = as.POSIXct(paste(timestamp.df[1,], timestamp.df[2,]),
format="%d/%m/%Y %H:%M:%S", value = NA))
View(final.timestamps)
View(final.timestamps)
test <- test[,(seq(1, to=ncol(final.timestamps), by=4)]
# Data is labeled the same as the scan data itself to facilitate ease of access
if (!(is.null(raw.sparklink.file))) {
sample.names <- raw.sparklink.file %>% select(Sample.Name)
names(scan.graph.data) <- sample.names[,1]
} else {
names(scan.graph.data) <- c(paste0("sample ", 1:length(scan.graph.data)))
}
return(final.timestamps)
}
# Function for setting the column names of the graph data so the
# data processing doesn't have to be run through again.
# Assumed format is Sparklink labels format.
setGraphLabels <- function(graph.labels, graph.data) {
names(graph.data) <- graph.labels[,1] # Is this even used? It's just one line and it's already run in the file processing itself
}
# Returns a data frame to be graphed from the given amplog file.
ampGraphData <- function(raw.amplog.file) {
amp.graph.data <- raw.amplog.file %>% select(X1, X3)
return(amp.graph.data)
}
# Deletes every nth column in the given data frame, beginning from the
# given starting index, i.
nthDelete <- function(data.frame, n, i) {
data.frame[,-(seq(i, to=ncol(data.frame), by=n))]
}
test <- test[,(seq(1, to=ncol(final.timestamps), by=4))]
test <- final.timestamps[,(seq(1, to=ncol(final.timestamps), by=4))]
test <- final.timestamps[(seq(1, to=ncol(final.timestamps), by=4)),]
test <- final.timestamps[(seq(1, to=nrow(final.timestamps), by=4)),]
test <- data.frame(start.time = final.timestamps[(seq(1, to=nrow(final.timestamps), by=4)),],
end.time = final.timestamps[(seq(4, to=nrow(final.timestamps), by=4)),])
View(final.timestamps)
test <- data.frame(start.time = final.timestamps[(seq(1, to=nrow(final.timestamps), by=4)),],
end.time = final.timestamps[(seq(3, to=nrow(final.timestamps), by=4)),])
test <- data.frame(start.time = final.timestamps[(seq(1, to=nrow(final.timestamps), by=4)),],
end.time = final.timestamps[(seq(2, to=nrow(final.timestamps), by=4)),])
View(test)
test <- data.frame(start.time = final.timestamps[(seq(1, to=nrow(final.timestamps), by=4)),],
end.time = final.timestamps[(seq(4, to=nrow(final.timestamps), by=2)),])
scan.graph.data <- scanGraphData(raw.scans.file)
test <- data.frame(start.time = final.timestamps[(seq(1, to=nrow(final.timestamps - 4), by=4)),],
end.time = final.timestamps[(seq(4, to=nrow(final.timestamps - 4), by=4)),])
test <- data.frame(start.time = final.timestamps[(seq(1, to=nrow(final.timestamps) - 4, by=4)),],
end.time = final.timestamps[(seq(4, to=nrow(final.timestamps) - 4, by=4)),])
test <- data.frame(start.time = final.timestamps[(seq(1, to=nrow(final.timestamps) - 4, by=4)),])
test <- rep(NA, nrow(final.timestamps/4))
test2 <- rep(NA, nrow(final.timestamps)/4)
test <- data.frame(start.time = final.timestamps[(seq(1, to=nrow(final.timestamps) - 4, by=4)),])
test2$start.time = final.timestamps[(seq(1, to=nrow(final.timestamps) - 4, by=4)),])
test2$start.time = final.timestamps[(seq(1, to=nrow(final.timestamps) - 4, by=4)),]
test2$start.time = final.timestamps[(seq(1, to=nrow(final.timestamps), by=4)),]
test2$end.time = final.timestamps[(seq(4, to=nrow(final.timestamps) - 4, by=4)),]
test2$end.time = final.timestamps[(seq(4, to=nrow(final.timestamps), by=4)),]
test2 <- as.data.frame(test2)
test3$start.time = final.timestamps[(seq(1, to=nrow(final.timestamps), by=4)),]
test.times$start.time = final.timestamps[(seq(1, to=nrow(final.timestamps), by=4)),]
nrow(final.timestamps)
nrow(final.timestamps)/4
(nrow(final.timestamps)/4) * 4
number.of.samples <- (nrow(final.timestamps)/4) * 4
number.of.samples <- round((nrow(final.timestamps)/4)) * 4
number.of.samples <- floor((nrow(final.timestamps)/4)) * 4
test <- data.frame(start.time = final.timestamps[(seq(1, to=number.of.samples, by=4)),],
end.time = final.timestamps[(seq(4, to=number.of.samples, by=4)),])
View(test)
sample.times <- data.frame(start.time = final.timestamps[(seq(1, to=number.of.samples, by=4)),],
end.time = final.timestamps[(seq(4, to=number.of.samples, by=4)),])
if (!(is.null(raw.sparklink.file))) {
sample.names <- raw.sparklink.file %>% select(Sample.Name)
names(sample.times) <- sample.names[,1]
} else {
names(sample.times) <- c(paste0("sample ", 1:length(scan.graph.data)))
}
names(sample.times) <- c(paste0("sample ", 1:length(scan.graph.data)))
View(test)
sample.times <- data.frame()
sample.times[1,] <- final.timestamps[(seq(1, to=number.of.samples, by=4)),]
sample.times <- data.frame(ncol(number.of.samples))
sample.times <- data.frame(matrix(ncol=number.of.samples, nrow = 2))
View(sample.times)
sample.times <- data.frame(matrix(ncol=number.of.samples/4, nrow = 2))
sample.times[1,] <- final.timestamps[(seq(1, to=number.of.samples, by=4)),]
sample.times[2,] <- end.time = final.timestamps[(seq(4, to=number.of.samples, by=4)),]
View(sample.times)
sample.times[1,] <- final.timestamps[(seq(1, to=number.of.samples, by=4)),]
sample.times[2,] <- final.timestamps[(seq(4, to=number.of.samples, by=4)),]
View(sample.times)
sample.times <- data.frame(vector(ncol=number.of.samples/4, nrow = 2))
sample.times <- data.frame(.POSIXct(character(ncol=number.of.samples/4)))
sample.times <- data.frame(.POSIXct(character(number.of.samples/4)))
View(sample.times)
sample.times[1,] <- final.timestamps[(seq(1, to=number.of.samples, by=4)),]
View(sample.times)
sample.times <- data.frame()
new.sample.times<- rbind(POSIXct(character(number.of.samples/4)))
new.sample.times<- rbind(.POSIXct(character(number.of.samples/4)))
View(new.sample.times)
sample.times[1,] <- final.timestamps[(seq(1, to=number.of.samples, by=4)),]
sample.times<- rbind(.POSIXct(character(number.of.samples/4)))
sample.times[1,] <- final.timestamps[(seq(1, to=number.of.samples, by=4)),]
View(sample.times)
View(sample.times)
sample.times[2,] <- final.timestamps[(seq(4, to=number.of.samples, by=4)),]
class(sample.times)
class(sample.times[1,])
sample.times<- rbind(.POSIXct(character(number.of.samples/4)))
View(sample.times)
class(sample.times)
class(sample.times[1,])
test <- .POSIXct(character(number.of.samples/4))
class(test)
sample.tims <- rbind(final.timestamps[(seq(1, to=number.of.samples, by=4)),],
final.timestamps[(seq(4, to=number.of.samples, by=4)),])
View(sample.tims)
sample.tims <- as.POSIXct(rbind(final.timestamps[(seq(1, to=number.of.samples, by=4)),],
final.timestamps[(seq(4, to=number.of.samples, by=4)),]))
test <- as.data.frame(matrix(nrow = 2, ncol = number.of.samples))
test <- as.data.frame(matrix(nrow = 2, ncol = number.of.samples/4))
class(test)
test[,1] <- as.POSIXct(test[,1])
class(test[,1])
sample.times <- as.data.frame(matrix(nrow = 2, ncol = number.of.samples/4))
sample.times[,1] <- as.POSIXct(sample.times[,1])
sample.times[,2] <- as.POSIXct(sample.times[,2])
View(sample.times)
View(sample.times)
sample.times[1,] <- final.timestamps[(seq(1, to=number.of.samples, by=4)),]
View(sample.times)
sample.times[1,] <- final.timestamps[(seq(1, to=number.of.samples, by=4)),]
class(sample.times)
class(sample.times[,1])
class(sample.times[1,])
View(sample.times)
final.timestamps[(seq(1, to=number.of.samples, by=4)),]
sample.times[,1] <- final.timestamps[(seq(1, to=number.of.samples, by=4)),]
sample.times[1,] <- final.timestamps[(seq(1, to=number.of.samples, by=4)),]
sample.times[1,] <- c(1:19)
sample.times[1,] <- as.Date(final.timestamps[(seq(1, to=number.of.samples, by=4)),])
sample.times[1,] <- as.Date(final.timestamps[(seq(1, to=number.of.samples, by=4)),], origin = "1970-01-01")
test <- as.Date(final.timestamps[(seq(1, to=number.of.samples, by=4)),], origin = "1970-01-01")
sample.times <- as.data.frame(matrix(nrow = 2, ncol = number.of.samples/4))
sample.times[1,] <- final.timestamps[(seq(1, to=number.of.samples, by=4)),]
sample.times[2,] <- final.timestamps[(seq(4, to=number.of.samples, by=4)),]
sample.times[,1] <- as.POSIXct(sample.times[,1])
sample.times[,1] <- as.POSIXct(sample.times[,1], origin = '1970-01-01')
View(sample.times)
sample.times[,2] <- as.POSIXct(sample.times[,2], origin = '1970-01-01')
View(sample.times)
sample.times[,1:ncol(sample.times)] <- as.POSIXct(sample.times[,1:ncol(sample.times)], origin = '1970-01-01')
sample.times[,1:ncol(sample.times)]
sample.times[,1:ncol(sample.times)] <- as.POSIXct(sample.times[,3)], origin = '1970-01-01')
sample.times[,1:ncol(sample.times)] <- as.POSIXct(sample.times[,3], origin = '1970-01-01')
View(sample.times)
sample.times[,3] <- as.POSIXct(sample.times[,3], origin = '1970-01-01')
View(sample.times)
sapply(sample.times, function(x) as.POSIXct(x, origin = '1970-01-01'))
sample.times <- sapply(sample.times, function(x) as.POSIXct(x, origin = '1970-01-01'))
View(sample.times)
sample.times[,3]
class(sample.times[,3])
sample.times[,3] <- as.POSIXct(sample.times[,3], origin = '1970-01-01')
class(sample.times[,3])
View(sample.times)
sample.times <- as.data.frame(matrix(nrow = 2, ncol = number.of.samples/4))
sample.times[1,] <- final.timestamps[(seq(1, to=number.of.samples, by=4)),]
sample.times[2,] <- final.timestamps[(seq(4, to=number.of.samples, by=4)),]
sample.times[,3] <- as.POSIXct(sample.times[,3], origin = '1970-01-01')
View(sample.times)
class(sample.times[,3])
sample.times <- sapply(sample.times, function(x) as.POSIXct(x, origin = '1970-01-01'))
sample.times <- as.data.frame(matrix(nrow = 2, ncol = number.of.samples/4))
sample.times[1,] <- final.timestamps[(seq(1, to=number.of.samples, by=4)),]
sample.times[2,] <- final.timestamps[(seq(4, to=number.of.samples, by=4)),]
sample.times[,3] <- as.POSIXct(sample.times[,3], origin = '1970-01-01')
sample.times <- apply(sample.times, function(x) as.POSIXct(x, origin = '1970-01-01'))
sample.times <- apply(sample.times, ncol(sample.times), function(x) as.POSIXct(x, origin = '1970-01-01'))
sample.times <- data.frame(start.time = final.timestamps[(seq(1, to=number.of.samples, by=4)),],
end.time = final.timestamps[(seq(4, to=number.of.samples, by=4)),])
View(sample.times)
View(sample.times)
sample.times$sample.name <- c(paste0("sample ", 1:length(scan.graph.data)))
View(sample.times)
View(sample.times)
sample.times$start.time <- ceiling_date(sample.times$start.time, "minute")
View(sample.times)
sample.times <- data.frame(start.time = final.timestamps[(seq(1, to=number.of.samples, by=4)),],
end.time = final.timestamps[(seq(4, to=number.of.samples, by=4)),])
View(sample.tims)
View(sample.times)
sample.times$start.time <- floor_date(sample.times$start.time, "minute")
sample.times$end.time <- ceiling_date(sample.times$end.time, "minute")
View(sample.times)
sample.times$sample.name <- c(paste0("sample ", 1:length(scan.graph.data)))
View(sample.times)
source("file-setup.R")
raw.scans.file <- read.csv("data\\170522_new_data_format_for_JC_DMA.csv", na.strings = c("", "NA"), stringsAsFactors=FALSE)
scan.timestamps <- scanTimeStamps(raw.scans.file)
View(scan.timestamps)
raw.scans.file <- read.csv("data\\170522_new_data_format_for_JC_DMA.csv", stringsAsFactors = FALSE)
raw.scans.file <- read.csv("data\\170522_new_data_format_for_JC_DMA.csv", na.strings = c("", "NA"), stringsAsFactors = FALSE)
scan.graph.data <- scanGraphData(raw.scans.file)
scan.timestamps <- scanTimeStamps(raw.scans.file)
View(scan.timestamps)
raw.scans.file <- read.csv("data\\AIMDataset2.csv", na.strings = c("", "NA"), stringsAsFactors=FALSE))
raw.scans.file <- read.csv("data\\AIMDataset2.csv", na.strings = c("", "NA"), stringsAsFactors=FALSE)
scan.graph.data <- scanGraphData(raw.scans.file)
scan.timestamps <- scanTimeStamps(raw.scans.file)
View(raw.scans.file)
timestamp.start.index <- grep("^Sample #", raw.scans.file[,1])
timestamp.end.index <- grep("^Start", raw.scans.file[,1])
timestamp.df <- raw.scans.file[timestamp.start.index:timestamp.end.index,]
View(timestamp.df)
colnames(timestamp.df) <- timestamp.df[1,]
timestamp.df <- timestamp.df[-1,]
View(timestamp.df)
timestamp.df <- timestamp.df[colSums(is.na(timestamp.df)) != nrow(timestamp.df)]
timestamp.df <- timestamp.df[,-1]
timestamp.df <- nthDelete(timestamp.df, 6, 1)
timestamp.df <- nthDelete(timestamp.df, 5, 1)
final.timestamps <- data.frame(start.time = as.POSIXct(paste(timestamp.df[1,], timestamp.df[2,]),
format="%d/%m/%Y %H:%M:%S", value = NA))
View(final.timestamps)
final.timestamps <- data.frame(start.time = as.POSIXct(paste(timestamp.df[1,], timestamp.df[2,]),
format="%d/%m/%Y %H:%M:%S"))
timestamp.start.index <- grep("^Sample #", raw.scans.file[,1])
timestamp.end.index <- grep("^Start", raw.scans.file[,1])
timestamp.df <- raw.scans.file[timestamp.start.index:timestamp.end.index,]
# Changes the column names of the time stamp dataframe to the first row, then
# deletes the first row.
colnames(timestamp.df) <- timestamp.df[1,]
timestamp.df <- timestamp.df[-1,]
# Selects only the relevant data (in this context only the columns that have information in them)
# All blank columns were set to NA when read in, and are now deleted.
timestamp.df <- timestamp.df[colSums(is.na(timestamp.df)) != nrow(timestamp.df)]
# Remove the first column of the dataframe containing labels
timestamp.df <- timestamp.df[,-1]
# Removes the first two scans of the six scans from the dataset
timestamp.df <- nthDelete(timestamp.df, 6, 1)
timestamp.df <- nthDelete(timestamp.df, 5, 1)
final.timestamps <- data.frame(start.time = as.POSIXct(paste(timestamp.df[1,], timestamp.df[2,]),
format="%d/%m/%Y %H:%M:%S"))
View(final.timestamps)
timestamp.start.index <- grep("^Sample #", raw.scans.file[,1])
timestamp.end.index <- grep("^Start", raw.scans.file[,1])
timestamp.df <- raw.scans.file[timestamp.start.index:timestamp.end.index,]
# Changes the column names of the time stamp dataframe to the first row, then
# deletes the first row.
colnames(timestamp.df) <- timestamp.df[1,]
timestamp.df <- timestamp.df[-1,]
# Selects only the relevant data (in this context only the columns that have information in them)
# All blank columns were set to NA when read in, and are now deleted.
timestamp.df <- timestamp.df[colSums(is.na(timestamp.df)) != nrow(timestamp.df)]
# Remove the first column of the dataframe containing labels
timestamp.df <- timestamp.df[,-1]
# Removes the first two scans of the six scans from the dataset
timestamp.df <- nthDelete(timestamp.df, 6, 1)
timestamp.df <- nthDelete(timestamp.df, 5, 1)
guess <- guess_formats(paste(timestamp.df[1,], timestamp.df[2,]))
guess <- guess_formats(as.Date(paste(timestamp.df[1,], timestamp.df[2,])))
final.timestamps <- data.frame(start.time = parse_date_time(paste(timestamp.df[1,], timestamp.df[2,]),
c("%d/%m/%Y %H:%M:%S",
"%m/%d/%y %H:%M:%S")))
View(final.timestamps)
scanTimeStamps <- function(raw.scans.file, raw.sparklink.file = NULL) {
# Removes all rows before and after the time stamps and the sample labels.
timestamp.start.index <- grep("^Sample #", raw.scans.file[,1])
timestamp.end.index <- grep("^Start", raw.scans.file[,1])
timestamp.df <- raw.scans.file[timestamp.start.index:timestamp.end.index,]
# Changes the column names of the time stamp dataframe to the first row, then
# deletes the first row.
colnames(timestamp.df) <- timestamp.df[1,]
timestamp.df <- timestamp.df[-1,]
# Selects only the relevant data (in this context only the columns that have information in them)
# All blank columns were set to NA when read in, and are now deleted.
timestamp.df <- timestamp.df[colSums(is.na(timestamp.df)) != nrow(timestamp.df)]
# Remove the first column of the dataframe containing labels
timestamp.df <- timestamp.df[,-1]
# Removes the first two scans of the six scans from the dataset
timestamp.df <- nthDelete(timestamp.df, 6, 1)
timestamp.df <- nthDelete(timestamp.df, 5, 1)
# Creates a dataframe from the start time and date for each scan
final.timestamps <- data.frame(start.time = parse_date_time(paste(timestamp.df[1,],
timestamp.df[2,]),
c("%d/%m/%Y %H:%M:%S",
"%m/%d/%y %H:%M:%S")))
# Creates columns of a rounded down start time and a rounded up end time to represent a flexible
# starting and end time to be graphed for each sample
number.of.samples <- floor((nrow(final.timestamps)/4)) * 4
sample.times <- data.frame(start.time = final.timestamps[(seq(1, to=number.of.samples, by=4)),],
end.time = final.timestamps[(seq(4, to=number.of.samples, by=4)),])
sample.times$start.time <- floor_date(sample.times$start.time, "minute")
sample.times$end.time <- ceiling_date(sample.times$end.time, "minute")
# Data is labeled the same as the scan data itself to facilitate ease of access
if (!(is.null(raw.sparklink.file))) {
sample.names <- raw.sparklink.file %>% select(Sample.Name)
sample.times$sample.name <- sample.names[,1]
} else {
sample.times$sample.name <- c(paste0("sample ", 1:length(scan.graph.data)))
}
return(sample.times)
}
scan.timestamps <- scanTimeStamps(raw.scans.file)
View(scan.timestamps)
new.scan.data <- scanGraphData(read.csv("data\\170522_new_data_format_for_JC_DMA.csv", stringsAsFactors = FALSE))
old.scan.data <- scanGraphData(read.csv("data\\AIMDataset2.csv", stringsAsFactors=FALSE))
scansDropped <- c(0)
drop.sample.test <- new.scan.data$`sample 1`
drop.sample.test <- dropScan(drop.sample.test, "scan1")
scansDropped
drop.sample.test <- dropScan(drop.sample.test, "scan1")
drop.sample.test <- dropScan(drop.sample.test, "scan2")
original.test <- new.scan.data$`sample 1`
add.sample.test <- addScan(drop.sample.test, "scan1", original.test)
add.sample.test <- addBackScan(drop.sample.test, "scan1", original.test)
scansDropped
scansDropped
scansDropped[length(scansDropped) + 1] <- 1
scansDropped <- c(0)
original.test <- new.scan.data$`sample 1`
drop.sample.test <- new.scan.data$`sample 1`
drop.sample.test <- dropScan(drop.sample.test, "scan2")
scansDropped
dropScan <- function(graph.data, scan.number) {
if (!(scan.number %in% colnames(graph.data))) {
stop("Dataset does not contain the given scan. Please enter another scan number.")
}
# Selects all columns that are not the given scan number
graph.data <- select(graph.data, which(colnames(graph.data) != scan.number))
# Tracks the number of the scan that was dropped
scansDropped[length(scansDropped) + 1] <<- scan.number
return(graph.data)
}
original.test <- new.scan.data$`sample 1`
drop.sample.test <- new.scan.data$`sample 1`
drop.sample.test <- dropScan(drop.sample.test, "scan2")
scansDropped
drop.sample.test <- dropScan(drop.sample.test, "scan1")
add.sample.test <- addBackScan(drop.sample.test, "scan1", original.test)
graph.data <- drop.sample.test
scan.number <- "scan1"
original.data <- original.test
if ((!(scan.number %in% scansDropped)) || (!(scan.number %in% colnames(original.data)))) {
stop("Scan has not been dropped previously. Please enter another scan number.")
}
cbind(graph.data, original.data$scan.number)
original.data$scan.number
scan.number.index <- which(colnames(graph.data) == scan.number)
scan.number.index <- which(colnames(original.data) == scan.number)
cbind(graph.data, original.data[[scan.number.index]])
add.sample.test <- addBackScan(drop.sample.test, "scan1", original.test)
addBackScan <- function(graph.data, scan.number, original.data) {
if ((!(scan.number %in% scansDropped)) || (!(scan.number %in% colnames(original.data)))) {
stop("Scan has not been dropped previously. Please enter another scan number.")
}
# Adds the column that corresponds with the given scan number back to the graphed dataset
scan.number.index <- which(colnames(original.data) == scan.number)
cbind(graph.data, original.data[[scan.number.index]]) # two issues: you aren't assigning cbind to a var, and the index isn't being retrieved properlys
# Removes the number tracking the scan that was previously dropped
# i.e, scansDropped = 1 3 4, scan.number = 1
# post: scansDropped = 3 4
scansDropped <<- scansDropped[-which(scansDropped %in% scan.number)]
return(graph.data)
}
scan.number.index <- which(colnames(original.data) == scan.number)
cbind(graph.data, original.data[[scan.number.index]]) # two issues: you aren't assigning cbind to a var, and the index isn't being retrieved properlys
cbind(graph.data, paste(scan.number) = original.data[[scan.number.index]]) # two issues: you aren't assigning cbind to a var, and the index isn't being retrieved properlys
cbind(graph.data, scan.number = original.data[[scan.number.index]]) # two issues: you aren't assigning cbind to a var, and the index isn't being retrieved properlys
cbind(graph.data, paste("scan", scan.number.index) = original.data[[scan.number.index]]) # two issues: you aren't assigning cbind to a var, and the index isn't being retrieved properlys
test <- match(names(graph.data), varnames$old)
assign(scan.number, scan.number)
scan.number.index <- which(colnames(original.data) == scan.number)
assign(paste(scan.number), original.data[[scan.number.index]])
test100 <- data.frame(mget(scan.number))
graph.data <- data.frame(mget(scan.number))
scansDropped <<- scansDropped[-which(scansDropped %in% scan.number)]
graph.data <- original.data[-which(colnames(original.data) %in% scansDropped)]
graph.data
scan.number <- "scan2"
check <- addBackScan(graph.data, scan.number, original.data)
graph.data <- drop.sample.test
scan.number <- "scan2"
original.data <- original.test
check <- addBackScan(graph.data, scan.number, original.data)
graph.data
scansDropped
-which(colnames(original.data) %in% scansDropped)
original.data[-which(colnames(original.data) %in% scansDropped)]
original.data[which(colnames(original.data) %in% scansDropped)]
original.data[!(which(colnames(original.data) %in% scansDropped))]
colnames(original.data)
scansDropped
scansDropped[length(scansDropped) + 1] <<- "scan1"
scansDropped[length(scansDropped) + 1] <<- "scan1"
scansDropped <- c(0)
scansDropped[length(scansDropped) + 1] <<- "scan1"
scansDropped[length(scansDropped) + 1] <- "scan1"
which(colnames(original.data) %in% scansDropped)
!(which(colnames(original.data) %in% scansDropped))
original.data[!(which(colnames(original.data) %in% scansDropped))]
original.data[which(colnames(original.data) %in% scansDropped)]
toRemove <- original.data[which(colnames(original.data) %in% scansDropped)]
original.data[-toRemove]
original.data[,which(colnames(original.data) %in% scansDropped)]
original.data[,!(which(colnames(original.data) %in% scansDropped))]
toRemove <- original.data[,(which(colnames(original.data) %in% scansDropped))]
check <- anti_join(original.data, toRemove)
check <- anti_join(toRemove, original.data)
graph.data.test <- select(original.data, !(which(colnames(original.data) %in% scansDropped)))
graph.data.test <- select(original.data, (!which(colnames(original.data) %in% scansDropped)))
graph.data.test <- select(original.data, (which(colnames(original.data) %in% scansDropped)))
graph.data.test <- select(original.data, (which(colnames(original.data) != scansDropped)))
graph.data.test <- select(original.data, (which(colnames(original.data) !%in% scansDropped)))
graph.data.test <- select(original.data, (which(colnames(original.data) %in% -scansDropped)))
graph.data.test <- select(original.data, (which(!(colnames(original.data) %in% scansDropped))))
addBackScan <- function(graph.data, scan.number, original.data) {
if ((!(scan.number %in% scansDropped)) || (!(scan.number %in% colnames(original.data)))) {
stop("Scan has not been dropped previously. Please enter another scan number.")
}
# Removes the number tracking the scan that was previously dropped
# i.e, scansDropped = 1 3 4, scan.number = 1
# post: scansDropped = 3 4
scansDropped <<- scansDropped[-which(scansDropped %in% scan.number)]
graph.dta <- select(original.data, (which(!(colnames(original.data) %in% scansDropped))))
# Sets old graph data to new dataset which contains all data except the datasets that have
# not been added back
graph.data <- original.data[-which(colnames(original.data) %in% scansDropped)]
return(graph.data)
}
addBackScan <- function(graph.data, scan.number, original.data) {
if ((!(scan.number %in% scansDropped)) || (!(scan.number %in% colnames(original.data)))) {
stop("Scan has not been dropped previously. Please enter another scan number.")
}
# Removes the number tracking the scan that was previously dropped
# i.e, scansDropped = 1 3 4, scan.number = 1
# post: scansDropped = 3 4
scansDropped <<- scansDropped[-which(scansDropped %in% scan.number)]
graph.data <- select(original.data, (which(!(colnames(original.data) %in% scansDropped))))
# Sets old graph data to new dataset which contains all data except the datasets that have
# not been added back
graph.data <- original.data[-which(colnames(original.data) %in% scansDropped)]
return(graph.data)
}
check <- addBackScan(graph.data, scan.number, original.data)
scan.number <- "scan2"
scan.number <- "scan1"
check <- addBackScan(graph.data, scan.number, original.data)
scan.number <- "scan1"
check.drop <- dropScan(graph.data, "scan1")
check.drop <- dropScan(graph.data, "scan3")
check <- addBackScan(graph.data, "scan3", original.data)
View(check)
graph.data <- select(original.data, (which(!(colnames(original.data) %in% scansDropped))))
