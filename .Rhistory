shiny::runApp('UW/sp2017/INFO201/twitter-weather')
library(anytime)
library(shiny)
library(dplyr)
library(plotly)
library(httr)
library(rgeos)
library(jsonlite)
library(rgdal)
library(rtweet)
library(stringr)
runApp('UW/sp2017/INFO201/twitter-weather')
source('scripts/setup.R')
#libraries
library(anytime)
library(shiny)
library(dplyr)
library(plotly)
library(httr)
library(rgeos)
library(jsonlite)
library(rgdal)
library(rtweet)
library(stringr)
library(rjson)
library(anytime)
library(shiny)
library(dplyr)
library(plotly)
library(httr)
library(rgeos)
library(jsonlite)
library(rgdal)
library(rtweet)
library(stringr)
shiny::runApp('UW/sp2017/INFO201/weather-app')
lat.long.df <- geo_data %>% findLatLong(city, state)
longitude <- lat.long.df[,1]
latitude <- lat.long.df[,2]
unix.time.day <- as.numeric(as.POSIXct(anydate(day)))
unix.time.day <- as.numeric(as.POSIXct(anydate(day)))
base.url <- "https://api.darksky.net/forecast/"
weather.uri <- paste0(base.url, "f2816b4bb0266a96e77991a187b35d9c", "/", latitude, ",", longitude, ",", unix.time.day)
weather.params <- list(exclude = paste0("currently", ",", "minutely", ",", "daily", ",", "flags"))
weather.response <- GET(weather.uri, query = weather.params)
weather.body <- content(weather.response, "text")
weather.results <- fromJSON(weather.body)
location.timezone <- weather.results$timezone
weather.df <- weather.results$hourly$data
weather.df <- ldply(weather.df, data.frame)
num.time <- as.numeric(weather.df$time)
weather.df$time <- anytime(num.time, tz = location.timezone, asUTC = FALSE)
weather.df$time.only <- format(as.POSIXct(weather.df$time) , format = "%H:%M:%S")
num.time <- as.numeric(weather.df$time)
anytime(num.time, tz = location.timezone, asUTC = FALSE)
runApp('UW/sp2017/INFO201/weather-app')
shiny::runApp()
runApp()
runApp()
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp()
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
shiny::runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
shiny::runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
shiny::runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
shiny::runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
runApp('Jobs/Spring 2017/DMEN Assistant/dmen-vis')
raw.scans.file <- read.csv("data\\170522_new_data_format_for_JC_DMA.csv", stringsAsFactors = FALSE)
setwd("~/Jobs/Spring 2017/DMEN Assistant/dmen-vis")
raw.scans.file <- read.csv("data\\170522_new_data_format_for_JC_DMA.csv", stringsAsFactors = FALSE)
View(raw.scans.file)
raw.scans.df <- raw.scans.file[which(scans.file$Sample.File == "Raw Data - Time(s)"):nrow(raw.scans.file),]
raw.scans.df <- raw.scans.file[which(raw.scans.file$Sample.File == "Raw Data - Time(s)"):nrow(raw.scans.file),]
View(raw.scans.file)
View(raw.scans.file)
raw.scans.file[1,]
raw.scans.file[1,1]
raw.scans.file[,1]
raw.scans.df <- raw.scans.file[which(raw.scans.file[,1] == "Raw Data - Time(s)"):nrow(raw.scans.file),]
which(raw.scans.file[,1] == "Raw Data - Time(s)"
# Removing rows before relevant scan data begins from scans file
raw.scans.file[,1]
raw.scans.df <- raw.scans.file[which(raw.scans.file[,1] == "Raw Data - Time(s)"):nrow(raw.scans.file),]
# Change column names to the first row (which contains names of relevant data)
colnames(raw.scans.df) <- raw.scans.df[1,]
raw.scans.df <- raw.scans.df[-1,]
# Filter out data that is not relevant to scans (gets all count data and diameters)
filtered.scans <- raw.scans.df %>% select(starts_with("Count"))
diameters <- raw.scans.df %>% select(`Diameter #1`)
# Remove first two scans of six scans
filtered.scans <- nthDelete(filtered.scans, 6, 1)
filtered.scans <- nthDelete(filtered.scans, 5, 1)
# Converts data frame to numeric matrix to allow binary operations (limitation of R)
filtered.scans <- (as.data.frame(lapply(filtered.scans, as.numeric)))
diameters <- (as.data.frame(lapply(diameters, as.numeric)))
# Apply formula to scan data
filtered.scans[,1:ncol(filtered.scans)] <- filtered.scans[,1:ncol(filtered.scans)] *
((25.02 * exp(-0.2382 * diameters$Diameter..1)) + # formula starts here
(950.9 * exp(-1.017 * diameters$Diameter..1)) + 1)
# Combine diameters and the filtered, processed scans into one data frame
scan.graph.data <- cbind(diameters, filtered.scans)
return(scan.graph.data)
}
nmGraphData <- function(raw.amplog.file) {
nm.graph.data <- amplog.file %>% select(X1, X3)
}
getSparklinkLabels <- function(raw.sparklink.file) {
graph.labels <- raw.sparklink.file %>% select()
}
# Deletes every nth column in the given data frame, beginning from the
# given starting index, i.
nthDelete <- function(data.frame, n, i) {
data.frame[,-(seq(i, to=ncol(data.frame), by=n))]
}
which(raw.scans.file[,1] == "Raw Data - Time(s)")
View(raw.scans.file)
raw.scans.file <- read.csv("data\\170522_new_data_format_for_JC_DMA.csv", stringsAsFactors = FALSE, colClasses = "character")
View(raw.scans.file)
View(raw.scans.file)
