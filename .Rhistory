avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
View(avg.sample.data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
graph.data <- scanGraphData(read.csv("data\\170622_Study114_AIM.csv", stringsAsFactors = FALSE, na.strings = c("", NA)))
sparklink.file <- read.csv("data\\170622_Study114_Runlist.csv", stringsAsFactors = FALSE, header = FALSE)
sample.flags <- integer(length(graph.data))
names(sample.flags) <- names(graph.data)
sample.flags[1] <- 1
if (!is.null(sample.flags)) {
avg.scans <- rbind(c("Scan Flag", sample.flags))
} else {
# Otherwise, flags are automatically set to 0 for every existing sample in the dataset.
avg.scans <- rbind(c("Scan Flag", integer(length(graph.data) - 1)))
}
avg.scans <-  avg.scans %>% rbind(c("Sample Label", names(graph.data)))
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
if (!is.null(sparklink.file)) {
sample.names <- rbind(c("Sample Name", sparklink.file[,4]))
sample.size.difference <- (length(graph.data) + 1) - length(sample.names)
if (length(sample.names) < length(graph.data) + 1) {
sample.names <- cbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names))))
}
avg.scans <- avg.scans %>% rbind(sample.names)
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
} else {
# Otherwise, only add the diameters and inj labels.
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(length(avg.scans) - 1))))
}
avg.scans <- as.data.frame(avg.scans, stringsAsFactors = FALSE)
if (!is.null(graph.data)) {
# Retrieves the diameters from the first set of sample data. The diameters should be the same for every dataset.
avg.sample.data <- as.character(graph.data[[1]]$sample.diameters)
graph.index <- 1
# For loop bound is set to the size of avg.scans so unlabeled samples are not included
for (i in 1:(ncol(avg.scans) - 1)) {
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
# If the sample is flagged, the average scan for that sample will be set to the 4th
# scan, which is scan #6
if (sample.flags[graph.index] == 1) {
current.sample.means <- current.sample[4]
}
avg.sample.data <- avg.sample.data %>%
cbind(as.character(current.sample.means))
graph.index <- graph.index + 1
}
avg.sample.data <- as.data.frame(avg.sample.data, stringsAsFactors = FALSE)
names(avg.sample.data) <- names(avg.scans)
avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
avg.scans <- avg.scans[complete.cases(avg.scans),]
View(avg.scans)
current.sample <- graph.data[[graph.index]][,1:4]
graph.index <- 1
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
current.sample.means <- current.sample[4]
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means2 <- rowMeans(current.sample)
current.sample.means <- as.numeric(current.sample[4])
current.sample.means <- current.sample[[4]]
if (!is.null(graph.data)) {
# Retrieves the diameters from the first set of sample data. The diameters should be the same for every dataset.
avg.sample.data <- as.character(graph.data[[1]]$sample.diameters)
graph.index <- 1
# For loop bound is set to the size of avg.scans so unlabeled samples are not included
for (i in 1:(ncol(avg.scans) - 1)) {
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
# If the sample is flagged, the average scan for that sample will be set to the 4th
# scan, which is scan #6
if (sample.flags[graph.index] == 1) {
current.sample.means <- current.sample[[4]]
}
avg.sample.data <- avg.sample.data %>%
cbind(as.character(current.sample.means))
graph.index <- graph.index + 1
}
avg.sample.data <- as.data.frame(avg.sample.data, stringsAsFactors = FALSE)
names(avg.sample.data) <- names(avg.scans)
avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
View(avg.scans)
if (!is.null(graph.data)) {
# Retrieves the diameters from the first set of sample data. The diameters should be the same for every dataset.
avg.sample.data <- as.character(graph.data[[1]]$sample.diameters)
graph.index <- 1
# For loop bound is set to the size of avg.scans so unlabeled samples are not included
for (i in 1:(ncol(avg.scans) - 1)) {
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
# If the sample is flagged, the average scan for that sample will be set to the 4th
# scan, which is scan #6
if (sample.flags[graph.index] == 1) {
current.sample.means <- current.sample[[4]]
}
avg.sample.data <- avg.sample.data %>%
cbind(as.character(current.sample.means))
graph.index <- graph.index + 1
}
avg.sample.data <- as.data.frame(avg.sample.data, stringsAsFactors = FALSE)
names(avg.sample.data) <- names(avg.scans)
avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
if (!is.null(sample.flags)) {
avg.scans <- rbind(c("Scan Flag", sample.flags))
} else {
# Otherwise, flags are automatically set to 0 for every existing sample in the dataset.
avg.scans <- rbind(c("Scan Flag", integer(length(graph.data) - 1)))
}
avg.scans <-  avg.scans %>% rbind(c("Sample Label", names(graph.data)))
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
if (!is.null(sparklink.file)) {
sample.names <- rbind(c("Sample Name", sparklink.file[,4]))
sample.size.difference <- (length(graph.data) + 1) - length(sample.names)
if (length(sample.names) < length(graph.data) + 1) {
sample.names <- cbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names))))
}
avg.scans <- avg.scans %>% rbind(sample.names)
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
} else {
# Otherwise, only add the diameters and inj labels.
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(length(avg.scans) - 1))))
}
avg.scans <- as.data.frame(avg.scans, stringsAsFactors = FALSE)
if (!is.null(graph.data)) {
# Retrieves the diameters from the first set of sample data. The diameters should be the same for every dataset.
avg.sample.data <- as.character(graph.data[[1]]$sample.diameters)
graph.index <- 1
# For loop bound is set to the size of avg.scans so unlabeled samples are not included
for (i in 1:(ncol(avg.scans) - 1)) {
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
# If the sample is flagged, the average scan for that sample will be set to the 4th
# scan, which is scan #6
if (sample.flags[graph.index] == 1) {
current.sample.means <- current.sample[[4]]
}
avg.sample.data <- avg.sample.data %>%
cbind(as.character(current.sample.means))
graph.index <- graph.index + 1
}
avg.sample.data <- as.data.frame(avg.sample.data, stringsAsFactors = FALSE)
names(avg.sample.data) <- names(avg.scans)
avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
avg.scans <- avg.scans[complete.cases(avg.scans),]
View(avg.scans)
sparklink.file <- read.csv("data\\170622_Study114_Runlist.csv", stringsAsFactors = FALSE, header = FALSE)
if (!is.null(sparklink.file)) {
sample.names <- rbind(c("Sample Name", sparklink.file[,4]))
sample.size.difference <- (length(graph.data) + 1) - length(sample.names)
if (length(sample.names) < length(graph.data) + 1) {
sample.names <- cbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names))))
}
avg.scans <- avg.scans %>% rbind(sample.names)
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
} else {
# Otherwise, only add the diameters and inj labels.
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(length(avg.scans) - 1))))
}
if (!is.null(sample.flags)) {
avg.scans <- rbind(c("Scan Flag", sample.flags))
} else {
# Otherwise, flags are automatically set to 0 for every existing sample in the dataset.
avg.scans <- rbind(c("Scan Flag", integer(length(graph.data) - 1)))
}
avg.scans <-  avg.scans %>% rbind(c("Sample Label", names(graph.data)))
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
if (!is.null(sparklink.file)) {
sample.names <- rbind(c("Sample Name", sparklink.file[,4]))
sample.size.difference <- (length(graph.data) + 1) - length(sample.names)
if (length(sample.names) < length(graph.data) + 1) {
sample.names <- cbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names))))
}
avg.scans <- avg.scans %>% rbind(sample.names)
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
} else {
# Otherwise, only add the diameters and inj labels.
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(length(avg.scans) - 1))))
}
if (!is.null(sparklink.file)) {
sample.names <- rbind(c("Sample Name", sparklink.file[,4]))
sample.size.difference <- (length(graph.data) + 1) - length(sample.names)
if (length(sample.names) < length(graph.data) + 1) {
sample.names <- cbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names))))
}
avg.scans <- avg.scans %>% rbind(sample.names)
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
} else {
# Otherwise, only add the diameters and inj labels.
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(length(avg.scans) - 1))))
}
View(avg.scans)
graph.data <- scanGraphData(read.csv("data\\170622_Study114_AIM.csv", stringsAsFactors = FALSE, na.strings = c("", NA)))
sparklink.file <- read.csv("data\\170622_Study114_Runlist.csv", stringsAsFactors = FALSE, header = FALSE)
sample.flags <- integer(length(graph.data))
names(sample.flags) <- names(graph.data)
if (!is.null(sample.flags)) {
avg.scans <- rbind(c("Scan Flag", sample.flags))
} else {
# Otherwise, flags are automatically set to 0 for every existing sample in the dataset.
avg.scans <- rbind(c("Scan Flag", integer(length(graph.data) - 1)))
}
avg.scans <-  avg.scans %>% rbind(c("Sample Label", names(graph.data)))
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
if (!is.null(sparklink.file)) {
sample.names <- rbind(c("Sample Name", sparklink.file[,4]))
sample.size.difference <- (length(graph.data) + 1) - length(sample.names)
if (length(sample.names) < length(graph.data) + 1) {
sample.names <- cbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names))))
}
avg.scans <- avg.scans %>% rbind(sample.names)
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
} else {
# Otherwise, only add the diameters and inj labels.
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(length(avg.scans) - 1))))
}
if (!is.null(sample.flags)) {
avg.scans <- rbind(c("Scan Flag", sample.flags))
} else {
# Otherwise, flags are automatically set to 0 for every existing sample in the dataset.
avg.scans <- rbind(c("Scan Flag", integer(length(graph.data) - 1)))
}
avg.scans <-  avg.scans %>% rbind(c("Sample Label", names(graph.data)))
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
if (!is.null(sparklink.file)) {
sample.names <- rbind(c("Sample Name", sparklink.file[,4]))
print(sparklink.file[,4])
sample.size.difference <- (length(graph.data) + 1) - length(sample.names)
if (length(sample.names) < length(graph.data) + 1) {
sample.names <- cbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names))))
}
avg.scans <- avg.scans %>% rbind(sample.names)
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
} else {
# Otherwise, only add the diameters and inj labels.
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(length(avg.scans) - 1))))
}
View(avg.scans)
View(avg.sample.data)
View(avg.sample.data)
graph.data <- scanGraphData(read.csv("data\\170622_Study114_AIM.csv", stringsAsFactors = FALSE, na.strings = c("", NA)), sparklink.file)
sparklink.file <- read.csv("data\\170622_Study114_Runlist.csv", stringsAsFactors = FALSE, header = FALSE)
sample.flags <- integer(length(graph.data))
names(sample.flags) <- names(graph.data)
if (!is.null(sample.flags)) {
avg.scans <- rbind(c("Scan Flag", sample.flags))
} else {
# Otherwise, flags are automatically set to 0 for every existing sample in the dataset.
avg.scans <- rbind(c("Scan Flag", integer(length(graph.data) - 1)))
}
avg.scans <-  avg.scans %>% rbind(c("Sample Label", names(graph.data)))
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
if (!is.null(sparklink.file)) {
sample.names <- rbind(c("Sample Name", sparklink.file[,4]))
sample.size.difference <- (length(graph.data) + 1) - length(sample.names)
if (length(sample.names) < length(graph.data) + 1) {
sample.names <- cbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names))))
}
avg.scans <- avg.scans %>% rbind(sample.names)
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
} else {
# Otherwise, only add the diameters and inj labels.
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(length(avg.scans) - 1))))
}
avg.scans <- as.data.frame(avg.scans, stringsAsFactors = FALSE)
if (!is.null(graph.data)) {
# Retrieves the diameters from the first set of sample data. The diameters should be the same for every dataset.
avg.sample.data <- as.character(graph.data[[1]]$sample.diameters)
graph.index <- 1
# For loop bound is set to the size of avg.scans so unlabeled samples are not included
for (i in 1:(ncol(avg.scans) - 1)) {
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
# If the sample is flagged, the average scan for that sample will be set to the 4th
# scan, which is scan #6
if (sample.flags[graph.index] == 1) {
current.sample.means <- current.sample[[4]]
}
avg.sample.data <- avg.sample.data %>%
cbind(as.character(current.sample.means))
graph.index <- graph.index + 1
}
avg.sample.data <- as.data.frame(avg.sample.data, stringsAsFactors = FALSE)
names(avg.sample.data) <- names(avg.scans)
avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
avg.scans <- avg.scans[complete.cases(avg.scans),]
View(avg.scans)
avg.scans[order(tolower(colnames(avg.scans))),]
test<- avg.scans[order(tolower(colnames(avg.scans))),]
View(test)
test<- avg.scans[,order(names(avg.scans))]
View(test)
test<- avg.scans[2:ncol(avg.scans)][,order(names(avg.scans))]
test<- avg.scans[,2:ncol(avg.scans)][,order(names(avg.scans))]
test<- avg.scans[,2:ncol(avg.scans)][,order(names(avg.scans))]
test<- avg.scans[,2:ncol(avg.scans)]
View(test)
test <- test[,order(names(test))]
View(test)
test <- test[,order(names(test) %in% letters)]
View(test)
test <- test[,order(!(names(test) %in% letters))]
View(test)
test <- test[,order(!(colnames(test) %in% letters))]
View(test)
test <- test[,-order(!(colnames(test) %in% letters))]
test<- avg.scans[,2:ncol(avg.scans)]
test <- test[,-order(!(colnames(test) %in% letters))]
test <- test[,order(!(colnames(test) %in% letters))]
test <- test[,order(!(colnames(test) %in% letters), descending = TRUE)]
test2 <- test[,order(!(colnames(test) %in% letters), descending = TRUE)]
test2 <- test[,order(names(test), descending = TRUE)]
test2 <- test[,order(names(test), descending = TRUE)]
test2 <- test[,order(names(test), descending = TRUE)]
test2 <- test[,order(names(test), descending = TRUE)]
test2 <- test[,order(names(test), descending = TRUE)]
test <- test[,order(!(colnames(test) %in% letters), decreasing =TRUE)]
test<- avg.scans[,2:ncol(avg.scans)]
test <- test[,order(!(colnames(test) %in% letters), decreasing =TRUE)]
View(test)
test <- test[,order(!(colnames(test) %in% letters), decreasing =TRUE)]
test <- test[,order(!(colnames(test) %in% letters), decreasing =TRUE)]
test <- test[,order((colnames(test)), decreasing =TRUE)]
View(test)
letters
names(test))[1]
names(test)[1]
startsWith(letters, names(test)[1])
startsWith("u", names(test)[1])
is.numeric(names(test)[1])
is.character(names(test)[1])
startsWith("u", names(test)[1])
startsWith("7", names(test)[1])
startsWith(u, names(test)[1])
startsWith("unlabeled", names(test)[1])
substring(names(test)[1], 1)
substring(names(test)[1], 2)
substring(names(test)[1], 5)
substring(names(test)[1], 10)
substring(names(test)[1], 17)
substring(names(test)[1], 19)
startsWith("7", substring(names(test)[1], 19)
startsWith("7", substring(names(test)[1], 19))
startsWith("7", substring(names(test)[1], 19))
startsWith("u", names(test)[1])
graph.data <- scanGraphData(read.csv("data\\170622_Study114_AIM.csv", stringsAsFactors = FALSE, na.strings = c("", NA)), sparklink.file)
sparklink.file <- read.csv("data\\170622_Study114_Runlist.csv", stringsAsFactors = FALSE, header = FALSE)
sample.flags <- integer(length(graph.data))
names(sample.flags) <- names(graph.data)
if (!is.null(sample.flags)) {
avg.scans <- rbind(c("Scan Flag", sample.flags))
} else {
# Otherwise, flags are automatically set to 0 for every existing sample in the dataset.
avg.scans <- rbind(c("Scan Flag", integer(length(graph.data) - 1)))
}
avg.scans <-  avg.scans %>% rbind(c("Sample Label", names(graph.data)))
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
if (!is.null(sparklink.file)) {
sample.names <- rbind(c("Sample Name", sparklink.file[,4]))
sample.size.difference <- (length(graph.data) + 1) - length(sample.names)
if (length(sample.names) < length(graph.data) + 1) {
sample.names <- cbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names))))
}
avg.scans <- avg.scans %>% rbind(sample.names)
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
} else {
# Otherwise, only add the diameters and inj labels.
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(length(avg.scans) - 1))))
}
avg.scans <- as.data.frame(avg.scans, stringsAsFactors = FALSE)
if (!is.null(graph.data)) {
# Retrieves the diameters from the first set of sample data. The diameters should be the same for every dataset.
avg.sample.data <- as.character(graph.data[[1]]$sample.diameters)
graph.index <- 1
# For loop bound is set to the size of avg.scans so unlabeled samples are not included
for (i in 1:(ncol(avg.scans) - 1)) {
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
# If the sample is flagged, the average scan for that sample will be set to the 4th
# scan, which is scan #6
if (sample.flags[graph.index] == 1) {
current.sample.means <- current.sample[[4]]
}
avg.sample.data <- avg.sample.data %>%
cbind(as.character(current.sample.means))
graph.index <- graph.index + 1
}
avg.sample.data <- as.data.frame(avg.sample.data, stringsAsFactors = FALSE)
names(avg.sample.data) <- names(avg.scans)
avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
avg.samples <- avg.scans[,2:ncol(avg.scans)]
avg.samples <- avg.samples[,order((colnames(avg.samples)), decreasing =TRUE)]
avg.scans[,2:ncol(avg.scans)] <- avg.samples
avg.scans <- avg.scans[complete.cases(avg.scans),]
View(avg.scans)
avg.samples <- avg.scans[,2:ncol(avg.scans)]
avg.samples <- avg.samples[,order((colnames(avg.samples)), decreasing =TRUE)]
avg.scans[,2:ncol(avg.scans)] <- avg.samples
avg.scans <- avg.scans[complete.cases(avg.scans),]
View(avg.scans)
avg.scans <- cbind(avg.scans[,1], avg.samples)
View(avg.scans)
avg.scans <- cbind("V1" = avg.scans[,1], avg.samples)
avg.scans <- avg.scans[complete.cases(avg.scans),]
View(avg.scans)
if (!is.null(sample.flags)) {
avg.scans <- rbind(c("Scan Flag", sample.flags))
} else {
# Otherwise, flags are automatically set to 0 for every existing sample in the dataset.
avg.scans <- rbind(c("Scan Flag", integer(length(graph.data) - 1)))
}
avg.scans <-  avg.scans %>% rbind(c("Sample Label", names(graph.data)))
avg.scans <- avg.scans[ , colSums(is.na(avg.scans)) == 0]
if (!is.null(sparklink.file)) {
sample.names <- rbind(c("Sample Name", sparklink.file[,4]))
sample.size.difference <- (length(graph.data) + 1) - length(sample.names)
if (length(sample.names) < length(graph.data) + 1) {
sample.names <- cbind(sample.names,
c(paste0("unnamed sample ",
length(sample.names):
length(sample.names))))
}
avg.scans <- avg.scans %>% rbind(sample.names)
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(ncol(avg.scans) - 1))))
} else {
# Otherwise, only add the diameters and inj labels.
avg.scans <- avg.scans %>% rbind(c("Diameter", paste0("inj", 1:(length(avg.scans) - 1))))
}
avg.scans <- as.data.frame(avg.scans, stringsAsFactors = FALSE)
if (!is.null(graph.data)) {
# Retrieves the diameters from the first set of sample data. The diameters should be the same for every dataset.
avg.sample.data <- as.character(graph.data[[1]]$sample.diameters)
graph.index <- 1
# For loop bound is set to the size of avg.scans so unlabeled samples are not included
for (i in 1:(ncol(avg.scans) - 1)) {
current.sample <- graph.data[[graph.index]][,1:4]
current.sample.means <- rowMeans(current.sample)
# If the sample is flagged, the average scan for that sample will be set to the 4th
# scan, which is scan #6
if (sample.flags[graph.index] == 1) {
current.sample.means <- current.sample[[4]]
}
avg.sample.data <- avg.sample.data %>%
cbind(as.character(current.sample.means))
graph.index <- graph.index + 1
}
avg.sample.data <- as.data.frame(avg.sample.data, stringsAsFactors = FALSE)
names(avg.sample.data) <- names(avg.scans)
avg.scans <- bind_rows(avg.scans, avg.sample.data)
}
avg.samples <- avg.scans[,2:ncol(avg.scans)]
View(avg.samples)
avg.samples <- avg.samples[,order(colnames(avg.samples))]
View(avg.samples)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
